package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Bool, BitAnd, BitOr, Break, Byte, Cadena, Case, Char, Cin, Coma, Comillas, ComparadorIgual,
    Const, Continue, Corchete_a, Corchete_c, Cout, Default, Define, Decremento, Diferente,
    Division, DivisionIgual, Do, Double, DobleMayor, DobleMenor, DosPuntos, Else, Endl, ERROR, Et,
    False, Float, For, Identificador, If, Igual, Int, Include, Incremento, Iostream, Linea,
    Llave_a, Llave_c, Long, Main, MasIgual, MenosIgual, MayorQue, MenorQue, MayorIgual, MenorIgual,
    Modulo, ModuloIgual, Multiplicacion, MultiplicacionIgual, Namespace, Negador, Numero, Numeral,    
    O_logico, Parent_a, Parent_c, P_coma, Punto, Register, Resta, Return, Short, Suma, Std, Struct,
    Switch, Typedef, True, Unsigned, Using, Void, While, Y_logico;

non terminal INICIO, SENTENCIA, DECLARACION, IF, FOR,
    SENTENCIA_BOOLEANA_COMPUESTA, SENTENCIA_BOOLEANA_SIMPLE,
    OPERADORES_RELACIONALES, DECLARACION_ANIDADA, IMPORTACION,
    SENTENCIA_BOOLEANA_ANIDADA, FOR_PARTE_UNO, OPERACIONES_COMPLEMENTARIAS,
    WHILE, DO_WHILE, OPERADORES_ARITMETICOS;

start with INICIO;

IMPORTACION ::=
    Numeral Include MenorQue Identificador Punto Identificador MayorQue |
    Numeral Include Comillas Identificador Punto Identificador Comillas |
    Numeral Include MenorQue Identificador MayorQue |
    IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue |
    IMPORTACION Numeral Include Comillas Identificador Punto Identificador Comillas |
    IMPORTACION Numeral Include MenorQue Identificador MayorQue
;

INICIO ::= 
    IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF |
    IF |
    SENTENCIA FOR|
    FOR |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE |
    DO_WHILE |
    SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma |
    OPERACIONES_COMPLEMENTARIAS P_coma
;
DECLARACION_ANIDADA::=
    Identificador Igual Numero |
    Identificador Igual Numero Coma DECLARACION_ANIDADA |
    Identificador Igual Comillas Comillas |
    Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA |
    Identificador Igual Comillas Identificador Comillas |
    Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA |
    Identificador Coma DECLARACION_ANIDADA |
    Identificador Igual Identificador |
    Identificador
;
DECLARACION ::=   
    Int DECLARACION_ANIDADA P_coma |
    Unsigned Int DECLARACION_ANIDADA P_coma |
    Short Int DECLARACION_ANIDADA P_coma |
    Unsigned Short Int DECLARACION_ANIDADA P_coma |
    Long Int DECLARACION_ANIDADA P_coma |
    Unsigned Long Int DECLARACION_ANIDADA P_coma |
    Double DECLARACION_ANIDADA P_coma |
    Long Double DECLARACION_ANIDADA P_coma |
    Float DECLARACION_ANIDADA P_coma |
    Char DECLARACION_ANIDADA P_coma |
    Unsigned Char DECLARACION_ANIDADA P_coma |
    Cadena DECLARACION_ANIDADA P_coma 
;
OPERADORES_ARITMETICOS::=
    Suma |
    Resta |
    Multiplicacion |
    Division
;
OPERADORES_RELACIONALES::=
    BitOr |
    BitAnd |
    ComparadorIgual |
    MenorIgual |
    MayorIgual |
    Diferente |
    MenorQue |
    MayorQue 
;
SENTENCIA_BOOLEANA_SIMPLE::=
    True |
    False |
    Identificador |
    Numero |
    Comillas Identificador Comillas |
    Comillas Comillas
;
SENTENCIA_BOOLEANA_COMPUESTA::=
    Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE |
    SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE |
    SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE |
    Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE |
    Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c |
    Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c |
    Negador SENTENCIA_BOOLEANA_SIMPLE 
;
SENTENCIA_BOOLEANA_ANIDADA::=
    SENTENCIA_BOOLEANA_COMPUESTA |    
    SENTENCIA_BOOLEANA_SIMPLE |    
    SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA |    
    SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA |
    SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA |
    SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
;
IF ::=
    If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c |
    If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
FOR_PARTE_UNO::=
    Int Identificador Igual Numero |
    Identificador |
    Identificador Igual Numero 
;
OPERACIONES_COMPLEMENTARIAS::=
    Incremento Identificador |
    Decremento Identificador |
    Identificador Incremento |
    Identificador Decremento |
    Identificador MasIgual Numero |
    Identificador MenosIgual Numero |
    Identificador MultiplicacionIgual Numero |
    Identificador DivisionIgual Numero |
    Identificador ModuloIgual Numero |
    Identificador Igual Identificador |
    Identificador Igual Identificador OPERADORES_ARITMETICOS Identificador 
;
FOR::=
    For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c
;
WHILE::=
    While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c
;
DO_WHILE::=
    Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma
;