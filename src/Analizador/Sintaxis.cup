package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Bool, BitAnd, BitOr, Break, Byte, Cadena, Case, Char, Cin, Coma, Comillas, ComparadorIgual,
    Const, Continue, Corchete_a, Corchete_c, Cout, Default, Define, Decremento, Diferente,
    Division, DivisionIgual, Do, Double, DobleMayor, DobleMenor, DosPuntos, Else, Endl, ERROR, Et,
    False, Float, For, Identificador, If, Igual, Int, Include, Incremento, Iostream, Linea,
    Llave_a, Llave_c, Long, Main, MasIgual, MenosIgual, MayorQue, MenorQue, MayorIgual, MenorIgual,
    Modulo, ModuloIgual, Multiplicacion, MultiplicacionIgual, Namespace, Negador, Numero, Numeral,    
    O_logico, Parent_a, Parent_c, P_coma, Punto, Register, Resta, Return, Short, Suma, Std, Struct,
    Switch, Typedef, True, Unsigned, Using, Void, While, Y_logico;

non terminal INICIO, SENTENCIA, DECLARACION, IF, IF_ELSE,
    SENTENCIA_BOOLEANA_COMPUESTA, SENTENCIA_BOOLEANA_SIMPLE,
    OPERADORES_RELACIONALES, DECLARACION_ANIDADA;

start with INICIO;

INICIO ::= 
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF |
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE 
;
DECLARACION_ANIDADA::=
    Identificador Igual Numero |
    Identificador Igual Numero Coma DECLARACION_ANIDADA |
    Identificador Igual Comillas Comillas |
    Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA |
    Identificador Igual Comillas Identificador Comillas |
    Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA |
    Identificador Coma DECLARACION_ANIDADA |
    Identificador
;
DECLARACION ::=   
    Int DECLARACION_ANIDADA P_coma |
    Unsigned Int DECLARACION_ANIDADA P_coma |
    Short Int DECLARACION_ANIDADA P_coma |
    Unsigned Short Int DECLARACION_ANIDADA P_coma |
    Long Int DECLARACION_ANIDADA P_coma |
    Unsigned Long Int DECLARACION_ANIDADA P_coma |
    Double DECLARACION_ANIDADA P_coma |
    Long Double DECLARACION_ANIDADA P_coma |
    Float DECLARACION_ANIDADA P_coma |
    Char Identificador P_coma |
    Char Identificador Igual  P_coma |
    Unsigned Char DECLARACION_ANIDADA P_coma |
    Cadena DECLARACION_ANIDADA P_coma 
;
OPERADORES_RELACIONALES::=
    BitOr |
    BitAnd |
    ComparadorIgual |
    MenorIgual |
    MayorIgual |
    Diferente 
;
SENTENCIA_BOOLEANA_SIMPLE::=
    True |
    False |
    Identificador |
    Numero |
    Comillas Identificador Comillas |
    Comillas Comillas
;
SENTENCIA_BOOLEANA_COMPUESTA::=
    Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE |
    SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE |
    SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE |
    Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE |
    Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c |
    Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c |
    Negador SENTENCIA_BOOLEANA_SIMPLE 
;
IF ::=
    If Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c Llave_a SENTENCIA Llave_c |
    If Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c Llave_a SENTENCIA Llave_c
;
IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
