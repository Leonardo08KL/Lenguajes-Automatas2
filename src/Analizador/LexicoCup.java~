/* The following code was generated by JFlex 1.4.3 on 5/08/22, 4:05 p. m. */

package Analizador;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/08/22, 4:05 p. m. from the specification file
 * <tt>./src/Analizador/LexicoCup.flex</tt>
 */
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 18,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 37, 19, 47,  0, 38, 40, 20, 48, 49, 36, 34, 52, 35, 51, 17, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 39, 50, 33, 32, 31,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 21,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 25, 22, 26,  0,  1, 
     0,  7,  4, 16, 27,  6, 15, 13, 30, 11,  1,  8, 28, 43, 12, 23, 
    14,  1,  5,  9, 10, 24, 46, 29,  1, 42,  1, 44, 41, 45,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\12\2\1\4\1\5"+
    "\1\6\1\2\1\1\1\2\1\7\1\10\3\2\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\2\1\24\1\25\1\2\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\0\15\2\1\34\12\2"+
    "\1\0\1\35\1\0\1\4\3\2\1\36\2\2\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\0\1\50\1\51\1\52\1\53\1\54\2\2\1\3"+
    "\10\2\1\55\5\2\1\56\5\2\1\57\2\2\1\60"+
    "\11\2\1\0\3\2\1\61\1\62\2\2\1\63\1\64"+
    "\4\2\1\65\7\2\1\66\2\2\1\67\1\70\5\2"+
    "\1\71\1\2\1\0\1\3\1\72\1\73\1\74\3\2"+
    "\1\75\1\2\1\76\5\2\1\77\1\100\1\101\1\2"+
    "\1\102\4\2\1\103\1\0\1\104\1\2\1\105\1\106"+
    "\4\2\1\107\3\2\1\110\1\111\1\3\1\2\1\112"+
    "\1\113\4\2\1\114\1\115\1\116\1\2\1\117\1\120"+
    "\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\65\0\u0385\0\u03ba\0\u03ef\0\65\0\65\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\65\0\u066b\0\u06a0\0\u06d5\0\65\0\65"+
    "\0\u070a\0\65\0\65\0\65\0\65\0\65\0\65\0\u073f"+
    "\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\152\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0350\0\65\0\u0c37\0\65\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\u0daa\0\65\0\65\0\65\0\65"+
    "\0\65\0\u0ddf\0\u0e14\0\u073f\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\152\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\152\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\152\0\u1203\0\u1238\0\152\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\152\0\152\0\u151e\0\u1553\0\152\0\152\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\152\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\u1730\0\u1765\0\u179a\0\152\0\u17cf\0\u1804\0\152\0\152"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\152\0\u1942\0\u1977"+
    "\0\u1977\0\152\0\152\0\152\0\u19ac\0\u19e1\0\u1a16\0\152"+
    "\0\u1a4b\0\152\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\152"+
    "\0\152\0\152\0\u1b89\0\152\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\152\0\u1c92\0\152\0\u1cc7\0\152\0\152\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\152\0\u1dd0\0\u1e05\0\u1e3a\0\152\0\152"+
    "\0\65\0\u1e6f\0\152\0\152\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43"+
    "\0\152\0\152\0\152\0\u1f78\0\152\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\3"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\5\1\21\1\22\1\23\1\24\1\3\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\3\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\66\0\2\3\1\0\15\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\6\0\2\60\1\4\17\60\1\0\42\60"+
    "\3\0\1\5\16\0\1\5\43\0\2\3\1\0\1\3"+
    "\1\61\13\3\4\0\1\3\1\0\1\62\1\3\2\0"+
    "\4\3\13\0\1\63\1\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\64\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\10\3\1\65\4\3\4\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\66\2\3\13\0\2\3\2\0\1\3"+
    "\7\0\2\3\1\0\6\3\1\67\5\3\1\70\4\0"+
    "\1\3\1\0\2\3\2\0\2\3\1\71\1\72\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\1\3\1\73"+
    "\13\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\1\74\1\3\2\0\1\3\7\0\2\3\1\0\10\3"+
    "\1\75\2\3\1\76\1\3\4\0\1\3\1\0\1\77"+
    "\1\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\3\3\1\100\11\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\1\3\1\101\13\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\3\3\1\102\11\3\4\0\1\3\1\0"+
    "\1\103\1\3\2\0\1\3\1\104\2\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\3\3\1\105\3\3"+
    "\1\106\5\3\4\0\1\3\1\0\1\107\1\3\2\0"+
    "\3\3\1\110\13\0\2\3\2\0\1\3\6\0\22\20"+
    "\1\0\42\20\23\111\1\112\2\111\1\113\36\111\1\0"+
    "\2\3\1\0\15\3\2\0\1\111\1\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\20\0"+
    "\1\114\1\0\1\114\51\0\2\3\1\0\5\3\1\115"+
    "\2\3\1\116\4\3\4\0\1\3\1\0\2\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\2\3\1\117\12\3\4\0\1\3\1\0\1\120\1\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\15\3\4\0\1\3\1\0\1\121\1\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\15\3\4\0\1\3\1\0\2\3\2\0\3\3\1\122"+
    "\13\0\2\3\2\0\1\3\45\0\1\123\1\124\64\0"+
    "\1\125\64\0\1\126\1\127\63\0\1\130\1\0\1\131"+
    "\24\0\1\4\35\0\1\132\2\0\1\133\14\0\1\134"+
    "\44\0\1\135\64\0\1\136\64\0\1\137\74\0\1\140"+
    "\65\0\1\141\14\0\2\3\1\0\3\3\1\142\11\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\15\3\4\0\1\3"+
    "\1\0\1\143\1\3\2\0\4\3\13\0\2\3\2\0"+
    "\1\3\10\0\1\144\63\0\2\3\1\0\2\3\1\145"+
    "\12\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\15\3\4\0"+
    "\1\3\1\0\1\146\1\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\6\3\1\147\6\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\6\3\1\150\2\3"+
    "\1\151\3\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\15\3"+
    "\4\0\1\3\1\0\2\3\2\0\1\152\3\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\5\3\1\153"+
    "\7\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\1\3\1\154"+
    "\13\3\4\0\1\3\1\0\2\3\2\0\1\155\3\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\3\3"+
    "\1\156\11\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\7\3"+
    "\1\157\5\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\15\3"+
    "\4\0\1\3\1\0\1\160\1\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\15\3\4\0"+
    "\1\3\1\0\1\3\1\161\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\12\3\1\162\2\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\6\3\1\163\5\3"+
    "\1\164\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\5\3\1\165"+
    "\7\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\15\3\4\0"+
    "\1\3\1\0\2\3\2\0\4\3\13\0\1\3\1\166"+
    "\2\0\1\3\7\0\2\3\1\0\7\3\1\167\5\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\15\3\4\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\170\2\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\1\3\1\171\13\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\15\3\4\0\1\3"+
    "\1\0\1\172\1\3\2\0\4\3\13\0\2\3\2\0"+
    "\1\3\7\0\2\3\1\0\5\3\1\173\7\3\4\0"+
    "\1\3\1\0\2\3\2\0\4\3\13\0\2\3\2\0"+
    "\1\3\7\0\2\3\1\0\10\3\1\174\4\3\4\0"+
    "\1\3\1\0\2\3\2\0\4\3\13\0\2\3\2\0"+
    "\1\3\7\0\2\3\1\0\10\3\1\175\4\3\4\0"+
    "\1\3\1\0\1\3\1\176\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\7\0\2\3\1\0\3\3\1\177\11\3"+
    "\4\0\1\3\1\0\2\3\2\0\4\3\13\0\2\3"+
    "\2\0\1\3\6\0\22\111\1\0\42\111\1\0\2\3"+
    "\1\0\7\3\1\200\5\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\5\3\1\201\7\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\13\3\1\202\1\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\15\3\4\0\1\3\1\0\1\3\1\203\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\10\3\1\204\4\3\4\0\1\3\1\0\2\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\7\3\1\205\5\3\4\0\1\3\1\0\2\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\10\0\1\206\63\0"+
    "\2\3\1\0\7\3\1\207\5\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\7\3\1\210\5\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\3\3\1\211\11\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\15\3\4\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\212\2\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\2\3\1\213\12\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\15\3\4\0\1\3\1\0\1\3\1\214"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\7\3\1\215\5\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\15\3\4\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\216\2\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\217\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\7\3\1\220\5\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\10\3\1\221\4\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\222\6\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\1\3\1\223\13\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\224\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\225\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\15\3\4\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\226\2\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\227\6\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\230\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\10\3\1\231\4\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\5\3\1\232\7\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\3\3\1\233\11\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\234\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\5\3\1\235\1\236\6\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\6\3\1\237\6\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\1\3\1\240\13\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\10\3\1\241\4\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\7\3\1\242\5\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\3\3\1\243\3\3\1\244\5\3\4\0"+
    "\1\3\1\0\2\3\2\0\4\3\13\0\2\3\2\0"+
    "\1\3\7\0\2\3\1\0\1\245\14\3\4\0\1\3"+
    "\1\0\2\3\2\0\4\3\13\0\2\3\2\0\1\3"+
    "\7\0\2\3\1\0\11\3\1\246\3\3\4\0\1\3"+
    "\1\0\2\3\2\0\4\3\13\0\2\3\2\0\1\3"+
    "\7\0\2\3\1\0\15\3\4\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\247\2\3\13\0\2\3\2\0\1\3"+
    "\6\0\2\250\1\206\17\250\1\0\36\250\1\251\3\250"+
    "\1\0\2\3\1\0\10\3\1\252\4\3\4\0\1\3"+
    "\1\0\2\3\2\0\4\3\13\0\2\3\2\0\1\3"+
    "\7\0\2\3\1\0\15\3\4\0\1\3\1\0\2\3"+
    "\2\0\1\253\3\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\4\3\1\254\10\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\1\3\1\255\13\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\5\3\1\256\7\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\10\3\1\257\4\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\13\3\1\260\1\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\14\3\1\261\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\262\6\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\15\3\4\0\1\3\1\0\2\3\2\0\1\263"+
    "\3\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\15\3\4\0\1\3\1\0\1\3\1\264\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\1\3"+
    "\1\265\13\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\5\3"+
    "\1\266\7\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\6\3"+
    "\1\267\6\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\2\3"+
    "\1\270\12\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\6\3"+
    "\1\271\6\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\6\3"+
    "\1\272\6\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\7\3"+
    "\1\273\5\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\11\3"+
    "\1\274\3\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\11\3"+
    "\1\275\3\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\15\3"+
    "\4\0\1\3\1\0\1\3\1\276\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\10\3\1\277"+
    "\4\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\15\3\4\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\300\2\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\2\3\1\301"+
    "\12\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\10\0\1\302\63\0\2\3\1\0"+
    "\10\3\1\303\4\3\4\0\1\3\1\0\2\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\6\3\1\304\6\3\4\0\1\3\1\0\2\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\11\3\1\305\3\3\4\0\1\3\1\0\2\3\2\0"+
    "\4\3\13\0\2\3\2\0\1\3\7\0\2\3\1\0"+
    "\15\3\4\0\1\3\1\0\2\3\2\0\3\3\1\306"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\2\3"+
    "\1\307\12\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\15\3"+
    "\4\0\1\3\1\0\2\3\2\0\1\310\3\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\2\3\1\311"+
    "\12\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\12\3\1\312"+
    "\2\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\13\3\1\313"+
    "\1\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\10\3\1\314"+
    "\4\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\10\3\1\315"+
    "\4\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\15\3\4\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\316\2\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\2\3\1\317"+
    "\12\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\2\3\1\320"+
    "\12\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\10\0\1\302\56\0\1\321\4\0"+
    "\2\3\1\0\2\3\1\322\12\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\13\3\1\323\1\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\2\3\1\324\12\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\3\3\1\325\11\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\3\3\1\326\11\3\4\0\1\3\1\0"+
    "\2\3\2\0\4\3\13\0\2\3\2\0\1\3\7\0"+
    "\2\3\1\0\15\3\4\0\1\3\1\0\1\3\1\327"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\330\12\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\331\6\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\1\3\1\332\13\3\4\0\1\3\1\0\2\3"+
    "\2\0\4\3\13\0\2\3\2\0\1\3\7\0\2\3"+
    "\1\0\15\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\1\3\1\333\2\0\1\3\7\0\2\3\1\0"+
    "\14\3\1\334\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\2\3"+
    "\1\335\12\3\4\0\1\3\1\0\2\3\2\0\4\3"+
    "\13\0\2\3\2\0\1\3\7\0\2\3\1\0\15\3"+
    "\4\0\1\3\1\0\2\3\2\0\1\336\3\3\13\0"+
    "\2\3\2\0\1\3\7\0\2\3\1\0\2\3\1\337"+
    "\12\3\4\0\1\3\1\0\2\3\2\0\4\3\13\0"+
    "\2\3\2\0\1\3\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8109];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\3\1\2\11\13\1\1\11"+
    "\3\1\2\11\1\1\6\11\1\0\30\1\1\0\1\11"+
    "\1\0\1\11\6\1\11\11\1\0\5\11\44\1\1\0"+
    "\41\1\1\0\31\1\1\0\16\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicoCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 77: 
          { return new Symbol(sym.Register, yychar, yyline, yytext());
          }
        case 82: break;
        case 5: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 83: break;
        case 48: 
          { return new Symbol(sym.Cin, yychar, yyline, yytext());
          }
        case 84: break;
        case 47: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 85: break;
        case 33: 
          { return new Symbol(sym.ComparadorIgual, yychar, yyline, yytext());
          }
        case 86: break;
        case 17: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 87: break;
        case 72: 
          { return new Symbol(sym.Define, yychar, yyline, yytext());
          }
        case 88: break;
        case 64: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 89: break;
        case 35: 
          { return new Symbol(sym.DobleMenor, yychar, yyline, yytext());
          }
        case 90: break;
        case 50: 
          { return new Symbol(sym.Byte, yychar, yyline, yytext());
          }
        case 91: break;
        case 76: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 92: break;
        case 27: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 93: break;
        case 58: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 94: break;
        case 20: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 95: break;
        case 24: 
          { return new Symbol(sym.Parent_c, yychar, yyline, yytext());
          }
        case 96: break;
        case 11: 
          { return new Symbol(sym.MenorQue, yychar, yyline, yytext());
          }
        case 97: break;
        case 60: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 98: break;
        case 4: 
          { /*Ignore*/
          }
        case 99: break;
        case 39: 
          { return new Symbol(sym.Decremento, yychar, yyline, yytext());
          }
        case 100: break;
        case 42: 
          { return new Symbol(sym.ModuloIgual, yychar, yyline, yytext());
          }
        case 101: break;
        case 69: 
          { return new Symbol(sym._String, yychar, yyline, yytext());
          }
        case 102: break;
        case 70: 
          { return new Symbol(sym.Switch, yychar, yyline, yytext());
          }
        case 103: break;
        case 25: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 104: break;
        case 31: 
          { return new Symbol(sym.DobleMayor, yychar, yyline, yytext());
          }
        case 105: break;
        case 79: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 106: break;
        case 14: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 107: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 108: break;
        case 55: 
          { return new Symbol(sym.Cout, yychar, yyline, yytext());
          }
        case 109: break;
        case 81: 
          { return new Symbol(sym.Namespace, yychar, yyline, yytext());
          }
        case 110: break;
        case 6: 
          { return new Symbol(sym.Comilla_simple, yychar, yyline, yytext());
          }
        case 111: break;
        case 16: 
          { return new Symbol(sym.Modulo, yychar, yyline, yytext());
          }
        case 112: break;
        case 43: 
          { return new Symbol(sym.Y_logico, yychar, yyline, yytext());
          }
        case 113: break;
        case 29: 
          { return new Symbol(sym.STRING_LITERAL, yychar, yyline, yytext());
          }
        case 114: break;
        case 44: 
          { return new Symbol(sym.O_logico, yychar, yyline, yytext());
          }
        case 115: break;
        case 10: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 116: break;
        case 18: 
          { return new Symbol(sym.BitAnd, yychar, yyline, yytext());
          }
        case 117: break;
        case 54: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 118: break;
        case 22: 
          { return new Symbol(sym.Numeral, yychar, yyline, yytext());
          }
        case 119: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 120: break;
        case 8: 
          { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
          }
        case 121: break;
        case 52: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 122: break;
        case 46: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 123: break;
        case 78: 
          { return new Symbol(sym.Iostream, yychar, yyline, yytext());
          }
        case 124: break;
        case 53: 
          { return new Symbol(sym.True, yychar, yyline, yytext());
          }
        case 125: break;
        case 61: 
          { return new Symbol(sym.Scanf, yychar, yyline, yytext());
          }
        case 126: break;
        case 80: 
          { return new Symbol(sym.Unsigned, yychar, yyline, yytext());
          }
        case 127: break;
        case 66: 
          { return new Symbol(sym.Using, yychar, yyline, yytext());
          }
        case 128: break;
        case 12: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 129: break;
        case 15: 
          { return new Symbol(sym.Negador, yychar, yyline, yytext());
          }
        case 130: break;
        case 62: 
          { return new Symbol(sym.Short, yychar, yyline, yytext());
          }
        case 131: break;
        case 41: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 132: break;
        case 63: 
          { return new Symbol(sym.False, yychar, yyline, yytext());
          }
        case 133: break;
        case 75: 
          { return new Symbol(sym.Include, yychar, yyline, yytext());
          }
        case 134: break;
        case 28: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 135: break;
        case 51: 
          { return new Symbol(sym.Endl, yychar, yyline, yytext());
          }
        case 136: break;
        case 21: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 137: break;
        case 37: 
          { return new Symbol(sym.Incremento, yychar, yyline, yytext());
          }
        case 138: break;
        case 40: 
          { return new Symbol(sym.MultiplicacionIgual, yychar, yyline, yytext());
          }
        case 139: break;
        case 49: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 140: break;
        case 26: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 141: break;
        case 38: 
          { return new Symbol(sym.MenosIgual, yychar, yyline, yytext());
          }
        case 142: break;
        case 59: 
          { return new Symbol(sym.Void, yychar, yyline, yytext());
          }
        case 143: break;
        case 23: 
          { return new Symbol(sym.Parent_a, yychar, yyline, yytext());
          }
        case 144: break;
        case 36: 
          { return new Symbol(sym.MasIgual, yychar, yyline, yytext());
          }
        case 145: break;
        case 73: 
          { return new Symbol(sym.Double, yychar, yyline, yytext());
          }
        case 146: break;
        case 30: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 147: break;
        case 13: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 148: break;
        case 45: 
          { return new Symbol(sym.Std, yychar, yyline, yytext());
          }
        case 149: break;
        case 65: 
          { return new Symbol(sym.Const, yychar, yyline, yytext());
          }
        case 150: break;
        case 34: 
          { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
          }
        case 151: break;
        case 68: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 152: break;
        case 67: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 153: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 154: break;
        case 71: 
          { return new Symbol(sym.Printf, yychar, yyline, yytext());
          }
        case 155: break;
        case 56: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 156: break;
        case 74: 
          { return new Symbol(sym.Typedef, yychar, yyline, yytext());
          }
        case 157: break;
        case 19: 
          { return new Symbol(sym.BitOr, yychar, yyline, yytext());
          }
        case 158: break;
        case 9: 
          { return new Symbol(sym.MayorQue, yychar, yyline, yytext());
          }
        case 159: break;
        case 57: 
          { return new Symbol(sym.Long, yychar, yyline, yytext());
          }
        case 160: break;
        case 32: 
          { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
          }
        case 161: break;
        case 7: 
          { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
