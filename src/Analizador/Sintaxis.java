
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 25 00:35:38 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 25 00:35:38 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\012\005\000\002\012\007\000\002\012\006\000\002" +
    "\012\010\000\002\012\007\000\002\012\011\000\002\012" +
    "\005\000\002\012\003\000\002\004\005\000\002\004\006" +
    "\000\002\004\006\000\002\004\007\000\002\004\006\000" +
    "\002\004\007\000\002\004\005\000\002\004\006\000\002" +
    "\004\005\000\002\004\005\000\002\004\006\000\002\004" +
    "\006\000\002\004\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\004\000\002\007\006\000\002\007\005\000\002\007\006" +
    "\000\002\007\007\000\002\007\005\000\002\007\006\000" +
    "\002\007\004\000\002\005\011\000\002\005\011\000\002" +
    "\006\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\052\006\062\004\001\002\000\004\102" +
    "\175\001\002\000\004\002\174\001\002\000\004\062\007" +
    "\001\002\000\004\102\010\001\002\000\004\103\011\001" +
    "\002\000\004\057\012\001\002\000\024\011\020\013\021" +
    "\034\027\045\014\050\015\052\023\061\025\111\013\120" +
    "\017\001\002\000\004\052\171\001\002\000\004\047\030" +
    "\001\002\000\004\102\111\001\002\000\026\011\ufffd\013" +
    "\ufffd\034\ufffd\045\ufffd\050\ufffd\052\ufffd\060\ufffd\061\ufffd" +
    "\111\ufffd\120\ufffd\001\002\000\012\013\073\052\076\061" +
    "\074\111\075\001\002\000\004\047\030\001\002\000\004" +
    "\047\065\001\002\000\026\011\ufff9\013\ufff9\034\ufff9\045" +
    "\ufff9\050\ufff9\052\ufff9\060\ufff9\061\ufff9\111\ufff9\120\ufff9" +
    "\001\002\000\004\047\030\001\002\000\026\011\ufffb\013" +
    "\ufffb\034\ufffb\045\ufffb\050\ufffb\052\ufffb\060\ufffb\061\ufffb" +
    "\111\ufffb\120\ufffb\001\002\000\006\034\055\052\056\001" +
    "\002\000\026\011\020\013\021\034\027\045\014\050\015" +
    "\052\023\060\054\061\025\111\013\120\017\001\002\000" +
    "\004\047\030\001\002\000\010\015\033\051\034\104\ufff1" +
    "\001\002\000\004\104\032\001\002\000\026\011\uffea\013" +
    "\uffea\034\uffea\045\uffea\050\uffea\052\uffea\060\uffea\061\uffea" +
    "\111\uffea\120\uffea\001\002\000\004\047\030\001\002\000" +
    "\006\016\036\077\035\001\002\000\006\015\046\104\ufff8" +
    "\001\002\000\006\016\037\047\040\001\002\000\006\015" +
    "\044\104\ufff6\001\002\000\004\016\041\001\002\000\006" +
    "\015\042\104\ufff4\001\002\000\004\047\030\001\002\000" +
    "\004\104\ufff3\001\002\000\004\047\030\001\002\000\004" +
    "\104\ufff5\001\002\000\004\047\030\001\002\000\004\104" +
    "\ufff7\001\002\000\004\104\ufff2\001\002\000\026\011\ufffe" +
    "\013\ufffe\034\ufffe\045\ufffe\050\ufffe\052\ufffe\060\ufffe\061" +
    "\ufffe\111\ufffe\120\ufffe\001\002\000\026\011\ufffa\013\ufffa" +
    "\034\ufffa\045\ufffa\050\ufffa\052\ufffa\060\ufffa\061\ufffa\111" +
    "\ufffa\120\ufffa\001\002\000\026\011\ufffc\013\ufffc\034\ufffc" +
    "\045\ufffc\050\ufffc\052\ufffc\060\ufffc\061\ufffc\111\ufffc\120" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\047\030" +
    "\001\002\000\004\047\030\001\002\000\004\104\060\001" +
    "\002\000\026\011\uffec\013\uffec\034\uffec\045\uffec\050\uffec" +
    "\052\uffec\060\uffec\061\uffec\111\uffec\120\uffec\001\002\000" +
    "\004\104\062\001\002\000\026\011\uffe9\013\uffe9\034\uffe9" +
    "\045\uffe9\050\uffe9\052\uffe9\060\uffe9\061\uffe9\111\uffe9\120" +
    "\uffe9\001\002\000\004\104\064\001\002\000\026\011\ufff0" +
    "\013\ufff0\034\ufff0\045\ufff0\050\ufff0\052\ufff0\060\ufff0\061" +
    "\ufff0\111\ufff0\120\ufff0\001\002\000\006\051\067\104\066" +
    "\001\002\000\026\011\uffe7\013\uffe7\034\uffe7\045\uffe7\050" +
    "\uffe7\052\uffe7\060\uffe7\061\uffe7\111\uffe7\120\uffe7\001\002" +
    "\000\004\104\070\001\002\000\026\011\uffe6\013\uffe6\034" +
    "\uffe6\045\uffe6\050\uffe6\052\uffe6\060\uffe6\061\uffe6\111\uffe6" +
    "\120\uffe6\001\002\000\004\104\072\001\002\000\026\011" +
    "\uffe4\013\uffe4\034\uffe4\045\uffe4\050\uffe4\052\uffe4\060\uffe4" +
    "\061\uffe4\111\uffe4\120\uffe4\001\002\000\004\047\030\001" +
    "\002\000\004\052\104\001\002\000\004\052\101\001\002" +
    "\000\004\047\030\001\002\000\004\104\100\001\002\000" +
    "\026\011\uffef\013\uffef\034\uffef\045\uffef\050\uffef\052\uffef" +
    "\060\uffef\061\uffef\111\uffef\120\uffef\001\002\000\004\047" +
    "\030\001\002\000\004\104\103\001\002\000\026\011\uffed" +
    "\013\uffed\034\uffed\045\uffed\050\uffed\052\uffed\060\uffed\061" +
    "\uffed\111\uffed\120\uffed\001\002\000\004\047\030\001\002" +
    "\000\004\104\106\001\002\000\026\011\uffeb\013\uffeb\034" +
    "\uffeb\045\uffeb\050\uffeb\052\uffeb\060\uffeb\061\uffeb\111\uffeb" +
    "\120\uffeb\001\002\000\004\104\110\001\002\000\026\011" +
    "\uffe5\013\uffe5\034\uffe5\045\uffe5\050\uffe5\052\uffe5\060\uffe5" +
    "\061\uffe5\111\uffe5\120\uffe5\001\002\000\020\016\122\044" +
    "\116\047\115\076\113\077\120\102\114\117\117\001\002" +
    "\000\004\103\157\001\002\000\016\016\122\044\116\047" +
    "\115\077\120\102\147\117\117\001\002\000\020\016\122" +
    "\044\116\047\115\076\113\077\120\102\114\117\117\001" +
    "\002\000\020\005\uffdb\006\uffdb\017\uffdb\030\uffdb\067\uffdb" +
    "\070\uffdb\103\uffdb\001\002\000\020\005\uffdc\006\uffdc\017" +
    "\uffdc\030\uffdc\067\uffdc\070\uffdc\103\uffdc\001\002\000\020" +
    "\005\uffdd\006\uffdd\017\uffdd\030\uffdd\067\uffdd\070\uffdd\103" +
    "\uffdd\001\002\000\020\005\uffda\006\uffda\017\uffda\030\uffda" +
    "\067\uffda\070\uffda\103\uffda\001\002\000\020\005\134\006" +
    "\126\017\130\030\133\067\132\070\135\103\127\001\002" +
    "\000\006\016\123\047\124\001\002\000\020\005\uffd8\006" +
    "\uffd8\017\uffd8\030\uffd8\067\uffd8\070\uffd8\103\uffd8\001\002" +
    "\000\004\016\125\001\002\000\020\005\uffd9\006\uffd9\017" +
    "\uffd9\030\uffd9\067\uffd9\070\uffd9\103\uffd9\001\002\000\016" +
    "\016\uffe3\044\uffe3\047\uffe3\076\uffe3\077\uffe3\117\uffe3\001" +
    "\002\000\004\057\141\001\002\000\016\016\uffe1\044\uffe1" +
    "\047\uffe1\076\uffe1\077\uffe1\117\uffe1\001\002\000\016\016" +
    "\122\044\116\047\115\076\136\077\120\117\117\001\002" +
    "\000\016\016\uffdf\044\uffdf\047\uffdf\076\uffdf\077\uffdf\117" +
    "\uffdf\001\002\000\016\016\uffde\044\uffde\047\uffde\076\uffde" +
    "\077\uffde\117\uffde\001\002\000\016\016\uffe2\044\uffe2\047" +
    "\uffe2\076\uffe2\077\uffe2\117\uffe2\001\002\000\016\016\uffe0" +
    "\044\uffe0\047\uffe0\076\uffe0\077\uffe0\117\uffe0\001\002\000" +
    "\014\016\122\044\116\047\115\077\120\117\117\001\002" +
    "\000\004\103\uffd6\001\002\000\004\103\uffd5\001\002\000" +
    "\024\011\020\013\021\034\027\045\014\050\015\052\023" +
    "\061\025\111\013\120\017\001\002\000\026\011\020\013" +
    "\021\034\027\045\014\050\015\052\023\060\143\061\025" +
    "\111\013\120\017\001\002\000\026\011\uffcf\013\uffcf\034" +
    "\uffcf\045\uffcf\050\uffcf\052\uffcf\060\uffcf\061\uffcf\111\uffcf" +
    "\120\uffcf\001\002\000\004\103\146\001\002\000\016\005" +
    "\134\006\126\017\130\030\133\067\132\070\135\001\002" +
    "\000\004\103\uffd3\001\002\000\020\016\122\044\116\047" +
    "\115\076\113\077\120\102\114\117\117\001\002\000\020" +
    "\005\134\006\126\017\130\030\133\067\132\070\135\103" +
    "\uffd1\001\002\000\016\016\122\044\116\047\115\076\152" +
    "\077\120\117\117\001\002\000\014\016\122\044\116\047" +
    "\115\077\120\117\117\001\002\000\004\103\uffd7\001\002" +
    "\000\004\103\uffd4\001\002\000\004\103\156\001\002\000" +
    "\004\103\uffd2\001\002\000\004\057\160\001\002\000\024" +
    "\011\020\013\021\034\027\045\014\050\015\052\023\061" +
    "\025\111\013\120\017\001\002\000\026\011\020\013\021" +
    "\034\027\045\014\050\015\052\023\060\162\061\025\111" +
    "\013\120\017\001\002\000\030\011\uffd0\013\uffd0\034\uffd0" +
    "\040\163\045\uffd0\050\uffd0\052\uffd0\060\uffd0\061\uffd0\111" +
    "\uffd0\120\uffd0\001\002\000\004\057\164\001\002\000\024" +
    "\011\020\013\021\034\027\045\014\050\015\052\023\061" +
    "\025\111\013\120\017\001\002\000\026\011\020\013\021" +
    "\034\027\045\014\050\015\052\023\060\166\061\025\111" +
    "\013\120\017\001\002\000\026\011\uffce\013\uffce\034\uffce" +
    "\045\uffce\050\uffce\052\uffce\060\uffce\061\uffce\111\uffce\120" +
    "\uffce\001\002\000\004\104\170\001\002\000\026\011\uffe8" +
    "\013\uffe8\034\uffe8\045\uffe8\050\uffe8\052\uffe8\060\uffe8\061" +
    "\uffe8\111\uffe8\120\uffe8\001\002\000\004\047\030\001\002" +
    "\000\004\104\173\001\002\000\026\011\uffee\013\uffee\034" +
    "\uffee\045\uffee\050\uffee\052\uffee\060\uffee\061\uffee\111\uffee" +
    "\120\uffee\001\002\000\004\002\001\001\002\000\004\103" +
    "\176\001\002\000\004\057\177\001\002\000\024\011\020" +
    "\013\021\034\027\045\014\050\015\052\023\061\025\111" +
    "\013\120\017\001\002\000\026\011\020\013\021\034\027" +
    "\045\014\050\015\052\023\060\201\061\025\111\013\120" +
    "\017\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\025\004\015\005" +
    "\023\006\021\001\001\000\002\001\001\000\004\012\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\050\005\052\006\051\001\001" +
    "\000\004\012\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\042" +
    "\001\001\000\002\001\001\000\004\012\044\001\001\000" +
    "\002\001\001\000\004\012\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\060\001\001" +
    "\000\004\012\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\111\010\120\001\001\000\002\001\001" +
    "\000\004\010\147\001\001\000\006\007\143\010\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\141" +
    "\004\015\005\023\006\021\001\001\000\010\004\050\005" +
    "\052\006\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\130\001\001\000\002\001\001\000\006\007" +
    "\154\010\144\001\001\000\004\011\150\001\001\000\004" +
    "\010\152\001\001\000\004\010\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\160\004\015\005\023\006" +
    "\021\001\001\000\010\004\050\005\052\006\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\164\004" +
    "\015\005\023\006\021\001\001\000\010\004\050\005\052" +
    "\006\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\177\004\015\005\023\006\021" +
    "\001\001\000\010\004\050\005\052\006\051\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= If Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA_SIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Char Identificador Igual P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

