
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 29 08:19:54 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 29 08:19:54 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\013\011\000\002\013" +
    "\011\000\002\013\007\000\002\013\007\000\002\013\012" +
    "\000\002\013\012\000\002\013\010\000\002\013\010\000" +
    "\002\002\016\000\002\002\012\000\002\002\011\000\002" +
    "\002\010\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\012\005" +
    "\000\002\012\007\000\002\012\006\000\002\012\010\000" +
    "\002\012\007\000\002\012\011\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\004\005\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\007\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\006\000\002" +
    "\004\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\010\004\000\002\007\006" +
    "\000\002\007\005\000\002\007\006\000\002\007\007\000" +
    "\002\007\005\000\002\007\006\000\002\007\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\005\011" +
    "\000\002\005\015\000\002\005\013\000\002\015\006\000" +
    "\002\015\003\000\002\015\005\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\007\000" +
    "\002\006\015\000\002\017\011\000\002\020\013\000\002" +
    "\022\006\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\007\000\002\023\003\000\002\025\003" +
    "\000\002\025\005\000\002\024\006\000\002\026\010\000" +
    "\002\026\012\000\002\026\011\000\002\026\010\000\002" +
    "\026\011\000\002\026\013\000\002\026\011\000\002\026" +
    "\012\000\002\027\016\000\002\027\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\010\052\010\062\005\100\006\001\002\000" +
    "\010\052\u0133\100\u0132\121\u0131\001\002\000\004\102\u012c" +
    "\001\002\000\004\053\u011e\001\002\000\004\002\u011d\001" +
    "\002\000\004\062\011\001\002\000\004\102\012\001\002" +
    "\000\004\103\013\001\002\000\004\057\014\001\002\000" +
    "\046\011\034\013\017\014\033\024\041\027\016\033\043" +
    "\034\031\045\021\046\015\047\026\050\040\052\027\054" +
    "\047\061\050\111\032\115\042\120\037\123\046\001\002" +
    "\000\004\102\u010c\001\002\000\004\047\u010b\001\002\000" +
    "\004\047\053\001\002\000\052\007\uffed\011\uffed\013\uffed" +
    "\014\uffed\024\uffed\027\uffed\033\uffed\034\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\052\uffed\054\uffed\060\uffed\061\uffed" +
    "\111\uffed\115\uffed\120\uffed\123\uffed\001\002\000\004\047" +
    "\053\001\002\000\052\007\uffe5\011\uffe5\013\uffe5\014\uffe5" +
    "\024\uffe5\027\uffe5\033\uffe5\034\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\052\uffe5\054\uffe5\060\uffe5\061\uffe5\111\uffe5" +
    "\115\uffe5\120\uffe5\123\uffe5\001\002\000\050\011\034\013" +
    "\017\014\033\024\041\027\016\033\043\034\031\045\021" +
    "\046\015\047\026\050\040\052\027\054\047\060\u0106\061" +
    "\050\111\032\115\042\120\037\123\046\001\002\000\052" +
    "\007\ufff3\011\ufff3\013\ufff3\014\ufff3\024\ufff3\027\ufff3\033" +
    "\ufff3\034\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3" +
    "\054\ufff3\060\ufff3\061\ufff3\111\ufff3\115\ufff3\120\ufff3\123" +
    "\ufff3\001\002\000\052\007\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\024\uffe3\027\uffe3\033\uffe3\034\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\052\uffe3\054\uffe3\060\uffe3\061\uffe3\111\uffe3" +
    "\115\uffe3\120\uffe3\123\uffe3\001\002\000\022\027\366\032" +
    "\364\051\371\054\365\063\362\064\370\072\363\074\367" +
    "\001\002\000\004\047\053\001\002\000\052\007\ufff1\011" +
    "\ufff1\013\ufff1\014\ufff1\024\ufff1\027\ufff1\033\ufff1\034\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1\060" +
    "\ufff1\061\ufff1\111\ufff1\115\ufff1\120\ufff1\123\ufff1\001\002" +
    "\000\004\047\053\001\002\000\004\052\353\001\002\000" +
    "\004\035\345\001\002\000\004\047\053\001\002\000\052" +
    "\007\uffeb\011\uffeb\013\uffeb\014\uffeb\024\uffeb\027\uffeb\033" +
    "\uffeb\034\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb" +
    "\054\uffeb\060\uffeb\061\uffeb\111\uffeb\115\uffeb\120\uffeb\123" +
    "\uffeb\001\002\000\004\104\342\001\002\000\012\013\324" +
    "\052\327\061\325\111\326\001\002\000\004\102\311\001" +
    "\002\000\004\036\275\001\002\000\004\102\203\001\002" +
    "\000\004\057\173\001\002\000\052\007\uffe7\011\uffe7\013" +
    "\uffe7\014\uffe7\024\uffe7\027\uffe7\033\uffe7\034\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\052\uffe7\054\uffe7\060\uffe7\061" +
    "\uffe7\111\uffe7\115\uffe7\120\uffe7\123\uffe7\001\002\000\052" +
    "\007\uffef\011\uffef\013\uffef\014\uffef\024\uffef\027\uffef\033" +
    "\uffef\034\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef" +
    "\054\uffef\060\uffef\061\uffef\111\uffef\115\uffef\120\uffef\123" +
    "\uffef\001\002\000\004\102\100\001\002\000\004\047\077" +
    "\001\002\000\006\034\051\052\052\001\002\000\004\047" +
    "\053\001\002\000\004\047\053\001\002\000\010\015\056" +
    "\051\057\104\uffda\001\002\000\004\104\055\001\002\000" +
    "\052\007\uffd5\011\uffd5\013\uffd5\014\uffd5\024\uffd5\027\uffd5" +
    "\033\uffd5\034\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052" +
    "\uffd5\054\uffd5\060\uffd5\061\uffd5\111\uffd5\115\uffd5\120\uffd5" +
    "\123\uffd5\001\002\000\004\047\053\001\002\000\010\016" +
    "\061\047\062\077\060\001\002\000\006\015\072\104\uffe2" +
    "\001\002\000\006\016\063\047\064\001\002\000\004\104" +
    "\uffdb\001\002\000\006\015\070\104\uffe0\001\002\000\004" +
    "\016\065\001\002\000\006\015\066\104\uffde\001\002\000" +
    "\004\047\053\001\002\000\004\104\uffdd\001\002\000\004" +
    "\047\053\001\002\000\004\104\uffdf\001\002\000\004\047" +
    "\053\001\002\000\004\104\uffe1\001\002\000\004\104\uffdc" +
    "\001\002\000\004\104\076\001\002\000\052\007\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\024\uffd2\027\uffd2\033\uffd2\034\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2\054\uffd2\060" +
    "\uffd2\061\uffd2\111\uffd2\115\uffd2\120\uffd2\123\uffd2\001\002" +
    "\000\006\103\uffa8\104\uffa8\001\002\000\020\016\112\044" +
    "\106\047\105\076\102\077\110\102\104\117\107\001\002" +
    "\000\012\101\167\103\uffb4\104\uffb4\124\170\001\002\000" +
    "\016\016\112\044\106\047\105\077\110\102\157\117\107" +
    "\001\002\000\004\103\141\001\002\000\020\016\112\044" +
    "\106\047\105\076\102\077\110\102\104\117\107\001\002" +
    "\000\032\005\uffbf\006\uffbf\017\uffbf\030\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\101\uffbf\103\uffbf\104\uffbf\124\uffbf" +
    "\001\002\000\032\005\uffc0\006\uffc0\017\uffc0\030\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\101\uffc0\103\uffc0\104\uffc0" +
    "\124\uffc0\001\002\000\032\005\uffc1\006\uffc1\017\uffc1\030" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\101\uffc1\103\uffc1" +
    "\104\uffc1\124\uffc1\001\002\000\032\005\uffbe\006\uffbe\017" +
    "\uffbe\030\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\101\uffbe" +
    "\103\uffbe\104\uffbe\124\uffbe\001\002\000\032\005\120\006" +
    "\124\017\130\030\126\065\117\066\127\067\125\070\122" +
    "\101\121\103\uffb3\104\uffb3\124\123\001\002\000\006\016" +
    "\113\047\114\001\002\000\032\005\uffbc\006\uffbc\017\uffbc" +
    "\030\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\101\uffbc\103" +
    "\uffbc\104\uffbc\124\uffbc\001\002\000\004\016\115\001\002" +
    "\000\032\005\uffbd\006\uffbd\017\uffbd\030\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\070\uffbd\101\uffbd\103\uffbd\104\uffbd\124\uffbd" +
    "\001\002\000\016\016\112\044\106\047\105\076\133\077" +
    "\110\117\107\001\002\000\016\016\uffc2\044\uffc2\047\uffc2" +
    "\076\uffc2\077\uffc2\117\uffc2\001\002\000\016\016\uffc8\044" +
    "\uffc8\047\uffc8\076\uffc8\077\uffc8\117\uffc8\001\002\000\020" +
    "\016\112\044\106\047\105\076\102\077\110\102\104\117" +
    "\107\001\002\000\016\016\uffc6\044\uffc6\047\uffc6\076\uffc6" +
    "\077\uffc6\117\uffc6\001\002\000\020\016\112\044\106\047" +
    "\105\076\102\077\110\102\104\117\107\001\002\000\016" +
    "\016\uffc9\044\uffc9\047\uffc9\076\uffc9\077\uffc9\117\uffc9\001" +
    "\002\000\016\016\uffc5\044\uffc5\047\uffc5\076\uffc5\077\uffc5" +
    "\117\uffc5\001\002\000\016\016\uffc4\044\uffc4\047\uffc4\076" +
    "\uffc4\077\uffc4\117\uffc4\001\002\000\016\016\uffc3\044\uffc3" +
    "\047\uffc3\076\uffc3\077\uffc3\117\uffc3\001\002\000\016\016" +
    "\uffc7\044\uffc7\047\uffc7\076\uffc7\077\uffc7\117\uffc7\001\002" +
    "\000\006\103\uffb0\104\uffb0\001\002\000\006\103\uffaf\104" +
    "\uffaf\001\002\000\014\016\112\044\106\047\105\077\110" +
    "\117\107\001\002\000\012\101\uffba\103\uffba\104\uffba\124" +
    "\uffba\001\002\000\012\101\uffb9\103\uffb9\104\uffb9\124\uffb9" +
    "\001\002\000\004\103\140\001\002\000\022\005\120\006" +
    "\124\017\130\030\126\065\117\066\127\067\125\070\122" +
    "\001\002\000\012\101\uffb7\103\uffb7\104\uffb7\124\uffb7\001" +
    "\002\000\004\057\142\001\002\000\046\011\034\013\017" +
    "\014\033\024\041\027\016\033\043\034\031\045\021\046" +
    "\015\047\026\050\040\052\027\054\047\061\050\111\032" +
    "\115\042\120\037\123\046\001\002\000\050\011\034\013" +
    "\017\014\033\024\041\027\016\033\043\034\031\045\021" +
    "\046\015\047\026\050\040\052\027\054\047\060\151\061" +
    "\050\111\032\115\042\120\037\123\046\001\002\000\052" +
    "\007\uffee\011\uffee\013\uffee\014\uffee\024\uffee\027\uffee\033" +
    "\uffee\034\uffee\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee" +
    "\054\uffee\060\uffee\061\uffee\111\uffee\115\uffee\120\uffee\123" +
    "\uffee\001\002\000\052\007\uffe6\011\uffe6\013\uffe6\014\uffe6" +
    "\024\uffe6\027\uffe6\033\uffe6\034\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\052\uffe6\054\uffe6\060\uffe6\061\uffe6\111\uffe6" +
    "\115\uffe6\120\uffe6\123\uffe6\001\002\000\052\007\ufff4\011" +
    "\ufff4\013\ufff4\014\ufff4\024\ufff4\027\ufff4\033\ufff4\034\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\054\ufff4\060" +
    "\ufff4\061\ufff4\111\ufff4\115\ufff4\120\ufff4\123\ufff4\001\002" +
    "\000\052\007\uffe4\011\uffe4\013\uffe4\014\uffe4\024\uffe4\027" +
    "\uffe4\033\uffe4\034\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\052\uffe4\054\uffe4\060\uffe4\061\uffe4\111\uffe4\115\uffe4\120" +
    "\uffe4\123\uffe4\001\002\000\052\007\ufff2\011\ufff2\013\ufff2" +
    "\014\ufff2\024\ufff2\027\ufff2\033\ufff2\034\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\052\ufff2\054\ufff2\060\ufff2\061\ufff2" +
    "\111\ufff2\115\ufff2\120\ufff2\123\ufff2\001\002\000\052\007" +
    "\uff9c\011\uff9c\013\uff9c\014\uff9c\024\uff9c\027\uff9c\033\uff9c" +
    "\034\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\054" +
    "\uff9c\060\uff9c\061\uff9c\111\uff9c\115\uff9c\120\uff9c\123\uff9c" +
    "\001\002\000\052\007\uffec\011\uffec\013\uffec\014\uffec\024" +
    "\uffec\027\uffec\033\uffec\034\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\052\uffec\054\uffec\060\uffec\061\uffec\111\uffec\115" +
    "\uffec\120\uffec\123\uffec\001\002\000\004\104\156\001\002" +
    "\000\052\007\uffe8\011\uffe8\013\uffe8\014\uffe8\024\uffe8\027" +
    "\uffe8\033\uffe8\034\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\054\uffe8\060\uffe8\061\uffe8\111\uffe8\115\uffe8\120" +
    "\uffe8\123\uffe8\001\002\000\052\007\ufff0\011\ufff0\013\ufff0" +
    "\014\ufff0\024\ufff0\027\ufff0\033\ufff0\034\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\060\ufff0\061\ufff0" +
    "\111\ufff0\115\ufff0\120\ufff0\123\ufff0\001\002\000\052\007" +
    "\uffea\011\uffea\013\uffea\014\uffea\024\uffea\027\uffea\033\uffea" +
    "\034\uffea\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\054" +
    "\uffea\060\uffea\061\uffea\111\uffea\115\uffea\120\uffea\123\uffea" +
    "\001\002\000\020\016\112\044\106\047\105\076\102\077" +
    "\110\102\104\117\107\001\002\000\032\005\120\006\124" +
    "\017\130\030\126\065\117\066\127\067\125\070\122\101" +
    "\uffb5\103\uffb5\104\uffb5\124\uffb5\001\002\000\016\016\112" +
    "\044\106\047\105\076\162\077\110\117\107\001\002\000" +
    "\014\016\112\044\106\047\105\077\110\117\107\001\002" +
    "\000\012\101\uffbb\103\uffbb\104\uffbb\124\uffbb\001\002\000" +
    "\012\101\uffb8\103\uffb8\104\uffb8\124\uffb8\001\002\000\004" +
    "\103\166\001\002\000\012\101\uffb6\103\uffb6\104\uffb6\124" +
    "\uffb6\001\002\000\020\016\112\044\106\047\105\076\102" +
    "\077\110\102\104\117\107\001\002\000\020\016\112\044" +
    "\106\047\105\076\102\077\110\102\104\117\107\001\002" +
    "\000\006\103\uffb2\104\uffb2\001\002\000\006\103\uffb1\104" +
    "\uffb1\001\002\000\046\011\034\013\017\014\033\024\041" +
    "\027\016\033\043\034\031\045\021\046\015\047\026\050" +
    "\040\052\027\054\047\061\050\111\032\115\042\120\037" +
    "\123\046\001\002\000\050\011\034\013\017\014\033\024" +
    "\041\027\016\033\043\034\031\045\021\046\015\047\026" +
    "\050\040\052\027\054\047\060\175\061\050\111\032\115" +
    "\042\120\037\123\046\001\002\000\004\123\176\001\002" +
    "\000\004\102\177\001\002\000\020\016\112\044\106\047" +
    "\105\076\102\077\110\102\104\117\107\001\002\000\004" +
    "\103\201\001\002\000\004\104\202\001\002\000\052\007" +
    "\uff9b\011\uff9b\013\uff9b\014\uff9b\024\uff9b\027\uff9b\033\uff9b" +
    "\034\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b\054" +
    "\uff9b\060\uff9b\061\uff9b\111\uff9b\115\uff9b\120\uff9b\123\uff9b" +
    "\001\002\000\004\047\204\001\002\000\004\103\205\001" +
    "\002\000\004\057\206\001\002\000\004\012\207\001\002" +
    "\000\010\016\250\047\251\077\247\001\002\000\010\012" +
    "\213\025\212\060\211\001\002\000\052\007\uff88\011\uff88" +
    "\013\uff88\014\uff88\024\uff88\027\uff88\033\uff88\034\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\052\uff88\054\uff88\060\uff88" +
    "\061\uff88\111\uff88\115\uff88\120\uff88\123\uff88\001\002\000" +
    "\004\037\242\001\002\000\010\016\215\047\216\077\214" +
    "\001\002\000\004\037\236\001\002\000\006\016\223\047" +
    "\224\001\002\000\004\037\217\001\002\000\046\011\034" +
    "\013\017\014\033\024\041\027\016\033\043\034\031\045" +
    "\021\046\015\047\026\050\040\052\027\054\047\061\050" +
    "\111\032\115\042\120\037\123\046\001\002\000\050\007" +
    "\221\011\034\013\017\014\033\024\041\027\016\033\043" +
    "\034\031\045\021\046\015\047\026\050\040\052\027\054" +
    "\047\061\050\111\032\115\042\120\037\123\046\001\002" +
    "\000\004\104\222\001\002\000\010\012\uff8b\025\uff8b\060" +
    "\uff8b\001\002\000\004\037\232\001\002\000\004\016\225" +
    "\001\002\000\004\037\226\001\002\000\046\011\034\013" +
    "\017\014\033\024\041\027\016\033\043\034\031\045\021" +
    "\046\015\047\026\050\040\052\027\054\047\061\050\111" +
    "\032\115\042\120\037\123\046\001\002\000\050\007\230" +
    "\011\034\013\017\014\033\024\041\027\016\033\043\034" +
    "\031\045\021\046\015\047\026\050\040\052\027\054\047" +
    "\061\050\111\032\115\042\120\037\123\046\001\002\000" +
    "\004\104\231\001\002\000\010\012\uff8c\025\uff8c\060\uff8c" +
    "\001\002\000\046\011\034\013\017\014\033\024\041\027" +
    "\016\033\043\034\031\045\021\046\015\047\026\050\040" +
    "\052\027\054\047\061\050\111\032\115\042\120\037\123" +
    "\046\001\002\000\050\007\234\011\034\013\017\014\033" +
    "\024\041\027\016\033\043\034\031\045\021\046\015\047" +
    "\026\050\040\052\027\054\047\061\050\111\032\115\042" +
    "\120\037\123\046\001\002\000\004\104\235\001\002\000" +
    "\010\012\uff8a\025\uff8a\060\uff8a\001\002\000\046\011\034" +
    "\013\017\014\033\024\041\027\016\033\043\034\031\045" +
    "\021\046\015\047\026\050\040\052\027\054\047\061\050" +
    "\111\032\115\042\120\037\123\046\001\002\000\050\007" +
    "\240\011\034\013\017\014\033\024\041\027\016\033\043" +
    "\034\031\045\021\046\015\047\026\050\040\052\027\054" +
    "\047\061\050\111\032\115\042\120\037\123\046\001\002" +
    "\000\004\104\241\001\002\000\010\012\uff8d\025\uff8d\060" +
    "\uff8d\001\002\000\046\011\034\013\017\014\033\024\041" +
    "\027\016\033\043\034\031\045\021\046\015\047\026\050" +
    "\040\052\027\054\047\061\050\111\032\115\042\120\037" +
    "\123\046\001\002\000\050\007\244\011\034\013\017\014" +
    "\033\024\041\027\016\033\043\034\031\045\021\046\015" +
    "\047\026\050\040\052\027\054\047\061\050\111\032\115" +
    "\042\120\037\123\046\001\002\000\004\104\245\001\002" +
    "\000\004\060\246\001\002\000\052\007\uff89\011\uff89\013" +
    "\uff89\014\uff89\024\uff89\027\uff89\033\uff89\034\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\052\uff89\054\uff89\060\uff89\061" +
    "\uff89\111\uff89\115\uff89\120\uff89\123\uff89\001\002\000\004" +
    "\037\271\001\002\000\006\016\256\047\257\001\002\000" +
    "\004\037\252\001\002\000\046\011\034\013\017\014\033" +
    "\024\041\027\016\033\043\034\031\045\021\046\015\047" +
    "\026\050\040\052\027\054\047\061\050\111\032\115\042" +
    "\120\037\123\046\001\002\000\050\007\254\011\034\013" +
    "\017\014\033\024\041\027\016\033\043\034\031\045\021" +
    "\046\015\047\026\050\040\052\027\054\047\061\050\111" +
    "\032\115\042\120\037\123\046\001\002\000\004\104\255" +
    "\001\002\000\010\012\uff8e\025\uff8e\060\uff8e\001\002\000" +
    "\004\037\265\001\002\000\004\016\260\001\002\000\004" +
    "\037\261\001\002\000\046\011\034\013\017\014\033\024" +
    "\041\027\016\033\043\034\031\045\021\046\015\047\026" +
    "\050\040\052\027\054\047\061\050\111\032\115\042\120" +
    "\037\123\046\001\002\000\050\007\263\011\034\013\017" +
    "\014\033\024\041\027\016\033\043\034\031\045\021\046" +
    "\015\047\026\050\040\052\027\054\047\061\050\111\032" +
    "\115\042\120\037\123\046\001\002\000\004\104\264\001" +
    "\002\000\010\012\uff90\025\uff90\060\uff90\001\002\000\046" +
    "\011\034\013\017\014\033\024\041\027\016\033\043\034" +
    "\031\045\021\046\015\047\026\050\040\052\027\054\047" +
    "\061\050\111\032\115\042\120\037\123\046\001\002\000" +
    "\050\007\267\011\034\013\017\014\033\024\041\027\016" +
    "\033\043\034\031\045\021\046\015\047\026\050\040\052" +
    "\027\054\047\061\050\111\032\115\042\120\037\123\046" +
    "\001\002\000\004\104\270\001\002\000\010\012\uff8f\025" +
    "\uff8f\060\uff8f\001\002\000\046\011\034\013\017\014\033" +
    "\024\041\027\016\033\043\034\031\045\021\046\015\047" +
    "\026\050\040\052\027\054\047\061\050\111\032\115\042" +
    "\120\037\123\046\001\002\000\050\007\273\011\034\013" +
    "\017\014\033\024\041\027\016\033\043\034\031\045\021" +
    "\046\015\047\026\050\040\052\027\054\047\061\050\111" +
    "\032\115\042\120\037\123\046\001\002\000\004\104\274" +
    "\001\002\000\010\012\uff91\025\uff91\060\uff91\001\002\000" +
    "\010\016\276\041\300\047\301\001\002\000\004\047\305" +
    "\001\002\000\004\104\304\001\002\000\004\104\uff95\001" +
    "\002\000\006\036\302\104\uff99\001\002\000\010\016\276" +
    "\041\300\047\301\001\002\000\004\104\uff97\001\002\000" +
    "\052\007\uff9a\011\uff9a\013\uff9a\014\uff9a\024\uff9a\027\uff9a" +
    "\033\uff9a\034\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\052" +
    "\uff9a\054\uff9a\060\uff9a\061\uff9a\111\uff9a\115\uff9a\120\uff9a" +
    "\123\uff9a\001\002\000\004\016\306\001\002\000\006\036" +
    "\307\104\uff98\001\002\000\010\016\276\041\300\047\301" +
    "\001\002\000\004\104\uff96\001\002\000\020\016\112\044" +
    "\106\047\105\076\102\077\110\102\104\117\107\001\002" +
    "\000\004\103\313\001\002\000\004\057\314\001\002\000" +
    "\046\011\034\013\017\014\033\024\041\027\016\033\043" +
    "\034\031\045\021\046\015\047\026\050\040\052\027\054" +
    "\047\061\050\111\032\115\042\120\037\123\046\001\002" +
    "\000\050\011\034\013\017\014\033\024\041\027\016\033" +
    "\043\034\031\045\021\046\015\047\026\050\040\052\027" +
    "\054\047\060\316\061\050\111\032\115\042\120\037\123" +
    "\046\001\002\000\054\007\uffae\011\uffae\013\uffae\014\uffae" +
    "\024\uffae\027\uffae\033\uffae\034\uffae\040\317\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\052\uffae\054\uffae\060\uffae\061\uffae" +
    "\111\uffae\115\uffae\120\uffae\123\uffae\001\002\000\006\050" +
    "\040\057\320\001\002\000\046\011\034\013\017\014\033" +
    "\024\041\027\016\033\043\034\031\045\021\046\015\047" +
    "\026\050\040\052\027\054\047\061\050\111\032\115\042" +
    "\120\037\123\046\001\002\000\052\007\uffac\011\uffac\013" +
    "\uffac\014\uffac\024\uffac\027\uffac\033\uffac\034\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\052\uffac\054\uffac\060\uffac\061" +
    "\uffac\111\uffac\115\uffac\120\uffac\123\uffac\001\002\000\050" +
    "\011\034\013\017\014\033\024\041\027\016\033\043\034" +
    "\031\045\021\046\015\047\026\050\040\052\027\054\047" +
    "\060\323\061\050\111\032\115\042\120\037\123\046\001" +
    "\002\000\052\007\uffad\011\uffad\013\uffad\014\uffad\024\uffad" +
    "\027\uffad\033\uffad\034\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\052\uffad\054\uffad\060\uffad\061\uffad\111\uffad\115\uffad" +
    "\120\uffad\123\uffad\001\002\000\004\047\053\001\002\000" +
    "\004\052\335\001\002\000\004\052\332\001\002\000\004" +
    "\047\053\001\002\000\004\104\331\001\002\000\052\007" +
    "\uffd8\011\uffd8\013\uffd8\014\uffd8\024\uffd8\027\uffd8\033\uffd8" +
    "\034\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\054" +
    "\uffd8\060\uffd8\061\uffd8\111\uffd8\115\uffd8\120\uffd8\123\uffd8" +
    "\001\002\000\004\047\053\001\002\000\004\104\334\001" +
    "\002\000\052\007\uffd6\011\uffd6\013\uffd6\014\uffd6\024\uffd6" +
    "\027\uffd6\033\uffd6\034\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\052\uffd6\054\uffd6\060\uffd6\061\uffd6\111\uffd6\115\uffd6" +
    "\120\uffd6\123\uffd6\001\002\000\004\047\053\001\002\000" +
    "\004\104\337\001\002\000\052\007\uffd4\011\uffd4\013\uffd4" +
    "\014\uffd4\024\uffd4\027\uffd4\033\uffd4\034\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\052\uffd4\054\uffd4\060\uffd4\061\uffd4" +
    "\111\uffd4\115\uffd4\120\uffd4\123\uffd4\001\002\000\004\104" +
    "\341\001\002\000\052\007\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\024\uffcf\027\uffcf\033\uffcf\034\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\052\uffcf\054\uffcf\060\uffcf\061\uffcf\111\uffcf" +
    "\115\uffcf\120\uffcf\123\uffcf\001\002\000\052\007\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\024\uffe9\027\uffe9\033\uffe9\034\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\054\uffe9\060" +
    "\uffe9\061\uffe9\111\uffe9\115\uffe9\120\uffe9\123\uffe9\001\002" +
    "\000\004\104\344\001\002\000\052\007\uffce\011\uffce\013" +
    "\uffce\014\uffce\024\uffce\027\uffce\033\uffce\034\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\052\uffce\054\uffce\060\uffce\061" +
    "\uffce\111\uffce\115\uffce\120\uffce\123\uffce\001\002\000\004" +
    "\047\346\001\002\000\006\035\351\104\uff94\001\002\000" +
    "\004\104\350\001\002\000\052\007\uff92\011\uff92\013\uff92" +
    "\014\uff92\024\uff92\027\uff92\033\uff92\034\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\052\uff92\054\uff92\060\uff92\061\uff92" +
    "\111\uff92\115\uff92\120\uff92\123\uff92\001\002\000\004\047" +
    "\346\001\002\000\004\104\uff93\001\002\000\004\047\053" +
    "\001\002\000\004\104\355\001\002\000\052\007\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\024\uffd7\027\uffd7\033\uffd7\034\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\054\uffd7\060" +
    "\uffd7\061\uffd7\111\uffd7\115\uffd7\120\uffd7\123\uffd7\001\002" +
    "\000\004\104\357\001\002\000\052\007\uffd3\011\uffd3\013" +
    "\uffd3\014\uffd3\024\uffd3\027\uffd3\033\uffd3\034\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\052\uffd3\054\uffd3\060\uffd3\061" +
    "\uffd3\111\uffd3\115\uffd3\120\uffd3\123\uffd3\001\002\000\004" +
    "\104\361\001\002\000\052\007\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\024\uffd9\027\uffd9\033\uffd9\034\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\052\uffd9\054\uffd9\060\uffd9\061\uffd9\111" +
    "\uffd9\115\uffd9\120\uffd9\123\uffd9\001\002\000\004\077\u0105" +
    "\001\002\000\004\077\u0104\001\002\000\004\077\u0103\001" +
    "\002\000\006\103\uffa6\104\uffa6\001\002\000\006\103\uffa5" +
    "\104\uffa5\001\002\000\004\077\u0102\001\002\000\004\077" +
    "\u0101\001\002\000\004\047\372\001\002\000\016\031\373" +
    "\073\377\103\uff9f\104\uff9f\107\375\112\376\001\002\000" +
    "\004\047\uffca\001\002\000\004\047\u0100\001\002\000\004" +
    "\047\uffcc\001\002\000\004\047\uffcd\001\002\000\004\047" +
    "\uffcb\001\002\000\006\103\uff9e\104\uff9e\001\002\000\006" +
    "\103\uffa3\104\uffa3\001\002\000\006\103\uffa2\104\uffa2\001" +
    "\002\000\006\103\uffa1\104\uffa1\001\002\000\006\103\uffa0" +
    "\104\uffa0\001\002\000\006\103\uffa4\104\uffa4\001\002\000" +
    "\004\002\ufff6\001\002\000\004\104\u0108\001\002\000\052" +
    "\007\uffd1\011\uffd1\013\uffd1\014\uffd1\024\uffd1\027\uffd1\033" +
    "\uffd1\034\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1" +
    "\054\uffd1\060\uffd1\061\uffd1\111\uffd1\115\uffd1\120\uffd1\123" +
    "\uffd1\001\002\000\004\104\u010a\001\002\000\052\007\uffd0" +
    "\011\uffd0\013\uffd0\014\uffd0\024\uffd0\027\uffd0\033\uffd0\034" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\052\uffd0\054\uffd0" +
    "\060\uffd0\061\uffd0\111\uffd0\115\uffd0\120\uffd0\123\uffd0\001" +
    "\002\000\006\103\uffa7\104\uffa7\001\002\000\006\047\u010e" +
    "\052\u010f\001\002\000\004\104\u0115\001\002\000\006\051" +
    "\u0113\104\uffaa\001\002\000\004\047\u0110\001\002\000\004" +
    "\051\u0111\001\002\000\004\077\u0112\001\002\000\004\104" +
    "\uffab\001\002\000\004\077\u0114\001\002\000\004\104\uffa9" +
    "\001\002\000\020\016\112\044\106\047\105\076\102\077" +
    "\110\102\104\117\107\001\002\000\004\104\u0117\001\002" +
    "\000\010\027\016\047\026\054\047\001\002\000\004\103" +
    "\u0119\001\002\000\004\057\u011a\001\002\000\046\011\034" +
    "\013\017\014\033\024\041\027\016\033\043\034\031\045" +
    "\021\046\015\047\026\050\040\052\027\054\047\061\050" +
    "\111\032\115\042\120\037\123\046\001\002\000\050\011" +
    "\034\013\017\014\033\024\041\027\016\033\043\034\031" +
    "\045\021\046\015\047\026\050\040\052\027\054\047\060" +
    "\u011c\061\050\111\032\115\042\120\037\123\046\001\002" +
    "\000\052\007\uff9d\011\uff9d\013\uff9d\014\uff9d\024\uff9d\027" +
    "\uff9d\033\uff9d\034\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\052\uff9d\054\uff9d\060\uff9d\061\uff9d\111\uff9d\115\uff9d\120" +
    "\uff9d\123\uff9d\001\002\000\004\002\001\001\002\000\006" +
    "\016\u011f\066\u0120\001\002\000\004\047\u0128\001\002\000" +
    "\006\047\u0121\055\u0122\001\002\000\006\065\u0124\105\u0125" +
    "\001\002\000\004\065\u0123\001\002\000\010\052\ufffd\100" +
    "\ufffd\121\ufffd\001\002\000\010\052\ufffe\100\ufffe\121\ufffe" +
    "\001\002\000\004\047\u0126\001\002\000\004\065\u0127\001" +
    "\002\000\010\052\000\100\000\121\000\001\002\000\004" +
    "\105\u0129\001\002\000\004\047\u012a\001\002\000\004\016" +
    "\u012b\001\002\000\010\052\uffff\100\uffff\121\uffff\001\002" +
    "\000\004\103\u012d\001\002\000\004\057\u012e\001\002\000" +
    "\046\011\034\013\017\014\033\024\041\027\016\033\043" +
    "\034\031\045\021\046\015\047\026\050\040\052\027\054" +
    "\047\061\050\111\032\115\042\120\037\123\046\001\002" +
    "\000\050\011\034\013\017\014\033\024\041\027\016\033" +
    "\043\034\031\045\021\046\015\047\026\050\040\052\027" +
    "\054\047\060\u0130\061\050\111\032\115\042\120\037\123" +
    "\046\001\002\000\004\002\ufff5\001\002\000\004\075\u0148" +
    "\001\002\000\004\053\u013a\001\002\000\004\062\u0134\001" +
    "\002\000\004\102\u0135\001\002\000\004\103\u0136\001\002" +
    "\000\004\057\u0137\001\002\000\046\011\034\013\017\014" +
    "\033\024\041\027\016\033\043\034\031\045\021\046\015" +
    "\047\026\050\040\052\027\054\047\061\050\111\032\115" +
    "\042\120\037\123\046\001\002\000\050\011\034\013\017" +
    "\014\033\024\041\027\016\033\043\034\031\045\021\046" +
    "\015\047\026\050\040\052\027\054\047\060\u0139\061\050" +
    "\111\032\115\042\120\037\123\046\001\002\000\004\002" +
    "\ufff7\001\002\000\006\016\u013b\066\u013c\001\002\000\004" +
    "\047\u0144\001\002\000\006\047\u013d\055\u013e\001\002\000" +
    "\006\065\u0140\105\u0141\001\002\000\004\065\u013f\001\002" +
    "\000\010\052\ufff9\100\ufff9\121\ufff9\001\002\000\010\052" +
    "\ufffa\100\ufffa\121\ufffa\001\002\000\004\047\u0142\001\002" +
    "\000\004\065\u0143\001\002\000\010\052\ufffc\100\ufffc\121" +
    "\ufffc\001\002\000\004\105\u0145\001\002\000\004\047\u0146" +
    "\001\002\000\004\016\u0147\001\002\000\010\052\ufffb\100" +
    "\ufffb\121\ufffb\001\002\000\004\113\u0149\001\002\000\004" +
    "\104\u014a\001\002\000\004\052\u014b\001\002\000\004\062" +
    "\u014c\001\002\000\004\102\u014d\001\002\000\004\103\u014e" +
    "\001\002\000\004\057\u014f\001\002\000\046\011\034\013" +
    "\017\014\033\024\041\027\016\033\043\034\031\045\021" +
    "\046\015\047\026\050\040\052\027\054\047\061\050\111" +
    "\032\115\042\120\037\123\046\001\002\000\050\011\034" +
    "\013\017\014\033\024\041\027\016\033\043\034\031\045" +
    "\021\046\015\047\026\050\040\052\027\054\047\060\u0151" +
    "\061\050\111\032\115\042\120\037\123\046\001\002\000" +
    "\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\006\002\006\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\022\004\023\005\027\006\044" +
    "\016\035\017\017\020\034\022\043\024\021\027\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0108" +
    "\001\001\000\002\001\001\000\004\012\u0106\001\001\000" +
    "\002\001\001\000\024\004\145\005\147\006\154\016\152" +
    "\017\143\020\151\022\153\024\144\027\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\357\001\001\000\002\001\001\000\004\012\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\074\001\001\000\004\012\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\066\001\001\000\002\001" +
    "\001\000\004\012\070\001\001\000\002\001\001\000\004" +
    "\012\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\100\010\110\014\102\001\001\000\002\001\001\000" +
    "\004\010\157\001\001\000\002\001\001\000\006\007\135" +
    "\010\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\100\010\110\014\131\001" +
    "\001\000\002\001\001\000\010\007\100\010\110\014\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\142\004\023\005\027\006\044\016\035\017\017\020\034" +
    "\022\043\024\021\027\024\001\001\000\024\004\145\005" +
    "\147\006\154\016\152\017\143\020\151\022\153\024\144" +
    "\027\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\164" +
    "\010\136\001\001\000\004\011\160\001\001\000\004\010" +
    "\162\001\001\000\004\010\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\100\010\110\014\171\001\001\000\010\007\100" +
    "\010\110\014\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\173\004\023\005\027\006\044\016\035" +
    "\017\017\020\034\022\043\024\021\027\024\001\001\000" +
    "\024\004\145\005\147\006\154\016\152\017\143\020\151" +
    "\022\153\024\144\027\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\100\010\110\014\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\217\004\023\005\027\006\044\016\035\017\017\020\034" +
    "\022\043\024\021\027\024\001\001\000\024\004\145\005" +
    "\147\006\154\016\152\017\143\020\151\022\153\024\144" +
    "\027\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\226\004\023\005\027\006\044\016\035\017\017\020" +
    "\034\022\043\024\021\027\024\001\001\000\024\004\145" +
    "\005\147\006\154\016\152\017\143\020\151\022\153\024" +
    "\144\027\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\232\004\023\005\027\006\044\016\035\017" +
    "\017\020\034\022\043\024\021\027\024\001\001\000\024" +
    "\004\145\005\147\006\154\016\152\017\143\020\151\022" +
    "\153\024\144\027\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\236\004\023\005\027\006\044\016" +
    "\035\017\017\020\034\022\043\024\021\027\024\001\001" +
    "\000\024\004\145\005\147\006\154\016\152\017\143\020" +
    "\151\022\153\024\144\027\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\242\004\023\005\027\006" +
    "\044\016\035\017\017\020\034\022\043\024\021\027\024" +
    "\001\001\000\024\004\145\005\147\006\154\016\152\017" +
    "\143\020\151\022\153\024\144\027\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\252" +
    "\004\023\005\027\006\044\016\035\017\017\020\034\022" +
    "\043\024\021\027\024\001\001\000\024\004\145\005\147" +
    "\006\154\016\152\017\143\020\151\022\153\024\144\027" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\261\004\023\005\027\006\044\016\035\017\017\020\034" +
    "\022\043\024\021\027\024\001\001\000\024\004\145\005" +
    "\147\006\154\016\152\017\143\020\151\022\153\024\144" +
    "\027\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\265\004\023\005\027\006\044\016\035\017\017" +
    "\020\034\022\043\024\021\027\024\001\001\000\024\004" +
    "\145\005\147\006\154\016\152\017\143\020\151\022\153" +
    "\024\144\027\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\271\004\023\005\027\006\044\016\035" +
    "\017\017\020\034\022\043\024\021\027\024\001\001\000" +
    "\024\004\145\005\147\006\154\016\152\017\143\020\151" +
    "\022\153\024\144\027\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\307\001" +
    "\001\000\002\001\001\000\010\007\100\010\110\014\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\314\004\023\005\027\006\044\016\035\017\017\020\034" +
    "\022\043\024\021\027\024\001\001\000\024\004\145\005" +
    "\147\006\154\016\152\017\143\020\151\022\153\024\144" +
    "\027\146\001\001\000\002\001\001\000\004\005\320\001" +
    "\001\000\026\003\321\004\023\005\027\006\044\016\035" +
    "\017\017\020\034\022\043\024\021\027\024\001\001\000" +
    "\002\001\001\000\024\004\145\005\147\006\154\016\152" +
    "\017\143\020\151\022\153\024\144\027\146\001\001\000" +
    "\002\001\001\000\004\012\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\351\001\001\000" +
    "\002\001\001\000\004\012\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u010c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\100\010" +
    "\110\014\u0115\001\001\000\002\001\001\000\004\016\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\u011a\004\023\005\027\006\044\016\035\017\017\020\034" +
    "\022\043\024\021\027\024\001\001\000\024\004\145\005" +
    "\147\006\154\016\152\017\143\020\151\022\153\024\144" +
    "\027\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\u012e\004\023\005\027\006\044\016\035\017\017\020" +
    "\034\022\043\024\021\027\024\001\001\000\024\004\145" +
    "\005\147\006\154\016\152\017\143\020\151\022\153\024" +
    "\144\027\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\u0137\004\023" +
    "\005\027\006\044\016\035\017\017\020\034\022\043\024" +
    "\021\027\024\001\001\000\024\004\145\005\147\006\154" +
    "\016\152\017\143\020\151\022\153\024\144\027\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\u014f\004\023\005\027\006\044\016\035\017\017\020" +
    "\034\022\043\024\021\027\024\001\001\000\024\004\145" +
    "\005\147\006\154\016\152\017\143\020\151\022\153\024" +
    "\144\027\146\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE ::= CASE Case Comillas Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE ::= CASE Case Identificador DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASE ::= CASE Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASE ::= Case Identificador DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE ::= Case Comillas Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CIN ::= Cin DobleMayor ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ENTRADA ::= Identificador DobleMayor ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ENTRADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SALIDA ::= Comillas Identificador Comillas DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SALIDA ::= Identificador DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SALIDA ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SALIDA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COUT ::= Cout DobleMenor SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Igual Identificador OPERADORES_ARITMETICOS Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACIONES_COMPLEMENTARIAS ::= Identificador ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACIONES_COMPLEMENTARIAS ::= Identificador DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACIONES_COMPLEMENTARIAS ::= Identificador MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONES_COMPLEMENTARIAS ::= Identificador MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONES_COMPLEMENTARIAS ::= Identificador MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACIONES_COMPLEMENTARIAS ::= Decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONES_COMPLEMENTARIAS ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR_PARTE_UNO ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR_PARTE_UNO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR_PARTE_UNO ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA_SIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Cadena DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

