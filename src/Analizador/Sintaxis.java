
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 28 23:04:28 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 28 23:04:28 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\013\011\000\002\013" +
    "\011\000\002\013\007\000\002\013\012\000\002\013\012" +
    "\000\002\013\010\000\002\002\016\000\002\002\012\000" +
    "\002\002\011\000\002\002\010\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\005\000" +
    "\002\003\004\000\002\012\005\000\002\012\007\000\002" +
    "\012\006\000\002\012\010\000\002\012\007\000\002\012" +
    "\011\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\004\005\000\002\004\006\000\002\004\006\000" +
    "\002\004\007\000\002\004\006\000\002\004\007\000\002" +
    "\004\005\000\002\004\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\006\000\002\004\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\004\000\002\007\006\000\002\007\005\000\002" +
    "\007\006\000\002\007\007\000\002\007\005\000\002\007" +
    "\006\000\002\007\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\005\011\000\002\005\015\000\002" +
    "\015\006\000\002\015\003\000\002\015\005\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\007\000\002\006\015\000\002\017\011\000\002\020" +
    "\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\010\052\010\062\005\100\006\001\002\000" +
    "\010\052\333\100\332\121\331\001\002\000\004\102\324" +
    "\001\002\000\004\053\310\001\002\000\004\002\307\001" +
    "\002\000\004\062\011\001\002\000\004\102\012\001\002" +
    "\000\004\103\013\001\002\000\004\057\014\001\002\000" +
    "\040\011\031\013\017\027\016\033\036\034\027\045\021" +
    "\046\015\047\024\050\035\052\026\054\041\061\042\111" +
    "\030\120\034\123\037\001\002\000\004\102\266\001\002" +
    "\000\004\047\265\001\002\000\004\047\045\001\002\000" +
    "\042\011\uffef\013\uffef\027\uffef\033\uffef\034\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\052\uffef\054\uffef\060\uffef\061" +
    "\uffef\111\uffef\120\uffef\123\uffef\001\002\000\004\047\045" +
    "\001\002\000\042\011\031\013\017\027\016\033\036\034" +
    "\027\045\021\046\015\047\024\050\035\052\026\054\041" +
    "\060\260\061\042\111\030\120\034\123\037\001\002\000" +
    "\042\011\ufff5\013\ufff5\027\ufff5\033\ufff5\034\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\052\ufff5\054\ufff5\060\ufff5\061" +
    "\ufff5\111\ufff5\120\ufff5\123\ufff5\001\002\000\022\027\240" +
    "\032\236\051\243\054\237\063\234\064\242\072\235\074" +
    "\241\001\002\000\042\011\ufff3\013\ufff3\027\ufff3\033\ufff3" +
    "\034\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054" +
    "\ufff3\060\ufff3\061\ufff3\111\ufff3\120\ufff3\123\ufff3\001\002" +
    "\000\004\047\045\001\002\000\004\047\045\001\002\000" +
    "\004\052\225\001\002\000\004\047\045\001\002\000\042" +
    "\011\uffed\013\uffed\027\uffed\033\uffed\034\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\052\uffed\054\uffed\060\uffed\061\uffed" +
    "\111\uffed\120\uffed\123\uffed\001\002\000\004\104\222\001" +
    "\002\000\012\013\204\052\207\061\205\111\206\001\002" +
    "\000\004\102\172\001\002\000\004\057\162\001\002\000" +
    "\004\102\072\001\002\000\042\011\ufff1\013\ufff1\027\ufff1" +
    "\033\ufff1\034\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052" +
    "\ufff1\054\ufff1\060\ufff1\061\ufff1\111\ufff1\120\ufff1\123\ufff1" +
    "\001\002\000\004\047\071\001\002\000\006\034\043\052" +
    "\044\001\002\000\004\047\045\001\002\000\004\047\045" +
    "\001\002\000\010\015\050\051\051\104\uffe2\001\002\000" +
    "\004\104\047\001\002\000\042\011\uffdd\013\uffdd\027\uffdd" +
    "\033\uffdd\034\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\052" +
    "\uffdd\054\uffdd\060\uffdd\061\uffdd\111\uffdd\120\uffdd\123\uffdd" +
    "\001\002\000\004\047\045\001\002\000\010\016\053\047" +
    "\054\077\052\001\002\000\006\015\064\104\uffea\001\002" +
    "\000\006\016\055\047\056\001\002\000\004\104\uffe3\001" +
    "\002\000\006\015\062\104\uffe8\001\002\000\004\016\057" +
    "\001\002\000\006\015\060\104\uffe6\001\002\000\004\047" +
    "\045\001\002\000\004\104\uffe5\001\002\000\004\047\045" +
    "\001\002\000\004\104\uffe7\001\002\000\004\047\045\001" +
    "\002\000\004\104\uffe9\001\002\000\004\104\uffe4\001\002" +
    "\000\004\104\070\001\002\000\042\011\uffda\013\uffda\027" +
    "\uffda\033\uffda\034\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\052\uffda\054\uffda\060\uffda\061\uffda\111\uffda\120\uffda\123" +
    "\uffda\001\002\000\006\103\uffb1\104\uffb1\001\002\000\020" +
    "\016\104\044\100\047\077\076\074\077\102\102\076\117" +
    "\101\001\002\000\012\101\156\103\uffbc\104\uffbc\124\157" +
    "\001\002\000\016\016\104\044\100\047\077\077\102\102" +
    "\146\117\101\001\002\000\004\103\133\001\002\000\020" +
    "\016\104\044\100\047\077\076\074\077\102\102\076\117" +
    "\101\001\002\000\032\005\uffc7\006\uffc7\017\uffc7\030\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\070\uffc7\101\uffc7\103\uffc7\104" +
    "\uffc7\124\uffc7\001\002\000\032\005\uffc8\006\uffc8\017\uffc8" +
    "\030\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\101\uffc8\103" +
    "\uffc8\104\uffc8\124\uffc8\001\002\000\032\005\uffc9\006\uffc9" +
    "\017\uffc9\030\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\101" +
    "\uffc9\103\uffc9\104\uffc9\124\uffc9\001\002\000\032\005\uffc6" +
    "\006\uffc6\017\uffc6\030\uffc6\065\uffc6\066\uffc6\067\uffc6\070" +
    "\uffc6\101\uffc6\103\uffc6\104\uffc6\124\uffc6\001\002\000\032" +
    "\005\112\006\116\017\122\030\120\065\110\066\121\067" +
    "\117\070\114\101\113\103\uffbb\104\uffbb\124\115\001\002" +
    "\000\006\016\105\047\106\001\002\000\032\005\uffc4\006" +
    "\uffc4\017\uffc4\030\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\101\uffc4\103\uffc4\104\uffc4\124\uffc4\001\002\000\004\016" +
    "\107\001\002\000\032\005\uffc5\006\uffc5\017\uffc5\030\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\101\uffc5\103\uffc5\104" +
    "\uffc5\124\uffc5\001\002\000\016\016\uffca\044\uffca\047\uffca" +
    "\076\uffca\077\uffca\117\uffca\001\002\000\016\016\104\044" +
    "\100\047\077\076\125\077\102\117\101\001\002\000\016" +
    "\016\uffd0\044\uffd0\047\uffd0\076\uffd0\077\uffd0\117\uffd0\001" +
    "\002\000\020\016\104\044\100\047\077\076\074\077\102" +
    "\102\076\117\101\001\002\000\016\016\uffce\044\uffce\047" +
    "\uffce\076\uffce\077\uffce\117\uffce\001\002\000\020\016\104" +
    "\044\100\047\077\076\074\077\102\102\076\117\101\001" +
    "\002\000\016\016\uffd1\044\uffd1\047\uffd1\076\uffd1\077\uffd1" +
    "\117\uffd1\001\002\000\016\016\uffcd\044\uffcd\047\uffcd\076" +
    "\uffcd\077\uffcd\117\uffcd\001\002\000\016\016\uffcc\044\uffcc" +
    "\047\uffcc\076\uffcc\077\uffcc\117\uffcc\001\002\000\016\016" +
    "\uffcb\044\uffcb\047\uffcb\076\uffcb\077\uffcb\117\uffcb\001\002" +
    "\000\016\016\uffcf\044\uffcf\047\uffcf\076\uffcf\077\uffcf\117" +
    "\uffcf\001\002\000\006\103\uffb8\104\uffb8\001\002\000\006" +
    "\103\uffb7\104\uffb7\001\002\000\014\016\104\044\100\047" +
    "\077\077\102\117\101\001\002\000\012\101\uffc2\103\uffc2" +
    "\104\uffc2\124\uffc2\001\002\000\012\101\uffc1\103\uffc1\104" +
    "\uffc1\124\uffc1\001\002\000\004\103\132\001\002\000\022" +
    "\005\112\006\116\017\122\030\120\065\110\066\121\067" +
    "\117\070\114\001\002\000\012\101\uffbf\103\uffbf\104\uffbf" +
    "\124\uffbf\001\002\000\004\057\134\001\002\000\040\011" +
    "\031\013\017\027\016\033\036\034\027\045\021\046\015" +
    "\047\024\050\035\052\026\054\041\061\042\111\030\120" +
    "\034\123\037\001\002\000\042\011\031\013\017\027\016" +
    "\033\036\034\027\045\021\046\015\047\024\050\035\052" +
    "\026\054\041\060\141\061\042\111\030\120\034\123\037" +
    "\001\002\000\042\011\ufff0\013\ufff0\027\ufff0\033\ufff0\034" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0" +
    "\060\ufff0\061\ufff0\111\ufff0\120\ufff0\123\ufff0\001\002\000" +
    "\042\011\ufff6\013\ufff6\027\ufff6\033\ufff6\034\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\052\ufff6\054\ufff6\060\ufff6\061" +
    "\ufff6\111\ufff6\120\ufff6\123\ufff6\001\002\000\042\011\ufff4" +
    "\013\ufff4\027\ufff4\033\ufff4\034\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\052\ufff4\054\ufff4\060\ufff4\061\ufff4\111\ufff4" +
    "\120\ufff4\123\ufff4\001\002\000\042\011\uffa5\013\uffa5\027" +
    "\uffa5\033\uffa5\034\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\052\uffa5\054\uffa5\060\uffa5\061\uffa5\111\uffa5\120\uffa5\123" +
    "\uffa5\001\002\000\042\011\uffee\013\uffee\027\uffee\033\uffee" +
    "\034\uffee\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee\054" +
    "\uffee\060\uffee\061\uffee\111\uffee\120\uffee\123\uffee\001\002" +
    "\000\004\104\145\001\002\000\042\011\ufff2\013\ufff2\027" +
    "\ufff2\033\ufff2\034\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\052\ufff2\054\ufff2\060\ufff2\061\ufff2\111\ufff2\120\ufff2\123" +
    "\ufff2\001\002\000\042\011\uffec\013\uffec\027\uffec\033\uffec" +
    "\034\uffec\045\uffec\046\uffec\047\uffec\050\uffec\052\uffec\054" +
    "\uffec\060\uffec\061\uffec\111\uffec\120\uffec\123\uffec\001\002" +
    "\000\020\016\104\044\100\047\077\076\074\077\102\102" +
    "\076\117\101\001\002\000\032\005\112\006\116\017\122" +
    "\030\120\065\110\066\121\067\117\070\114\101\uffbd\103" +
    "\uffbd\104\uffbd\124\uffbd\001\002\000\016\016\104\044\100" +
    "\047\077\076\151\077\102\117\101\001\002\000\014\016" +
    "\104\044\100\047\077\077\102\117\101\001\002\000\012" +
    "\101\uffc3\103\uffc3\104\uffc3\124\uffc3\001\002\000\012\101" +
    "\uffc0\103\uffc0\104\uffc0\124\uffc0\001\002\000\004\103\155" +
    "\001\002\000\012\101\uffbe\103\uffbe\104\uffbe\124\uffbe\001" +
    "\002\000\020\016\104\044\100\047\077\076\074\077\102" +
    "\102\076\117\101\001\002\000\020\016\104\044\100\047" +
    "\077\076\074\077\102\102\076\117\101\001\002\000\006" +
    "\103\uffba\104\uffba\001\002\000\006\103\uffb9\104\uffb9\001" +
    "\002\000\040\011\031\013\017\027\016\033\036\034\027" +
    "\045\021\046\015\047\024\050\035\052\026\054\041\061" +
    "\042\111\030\120\034\123\037\001\002\000\042\011\031" +
    "\013\017\027\016\033\036\034\027\045\021\046\015\047" +
    "\024\050\035\052\026\054\041\060\164\061\042\111\030" +
    "\120\034\123\037\001\002\000\004\123\165\001\002\000" +
    "\004\102\166\001\002\000\020\016\104\044\100\047\077" +
    "\076\074\077\102\102\076\117\101\001\002\000\004\103" +
    "\170\001\002\000\004\104\171\001\002\000\042\011\uffa4" +
    "\013\uffa4\027\uffa4\033\uffa4\034\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\052\uffa4\054\uffa4\060\uffa4\061\uffa4\111\uffa4" +
    "\120\uffa4\123\uffa4\001\002\000\020\016\104\044\100\047" +
    "\077\076\074\077\102\102\076\117\101\001\002\000\004" +
    "\103\174\001\002\000\004\057\175\001\002\000\040\011" +
    "\031\013\017\027\016\033\036\034\027\045\021\046\015" +
    "\047\024\050\035\052\026\054\041\061\042\111\030\120" +
    "\034\123\037\001\002\000\042\011\031\013\017\027\016" +
    "\033\036\034\027\045\021\046\015\047\024\050\035\052" +
    "\026\054\041\060\177\061\042\111\030\120\034\123\037" +
    "\001\002\000\044\011\uffb6\013\uffb6\027\uffb6\033\uffb6\034" +
    "\uffb6\040\200\045\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6" +
    "\054\uffb6\060\uffb6\061\uffb6\111\uffb6\120\uffb6\123\uffb6\001" +
    "\002\000\004\057\201\001\002\000\040\011\031\013\017" +
    "\027\016\033\036\034\027\045\021\046\015\047\024\050" +
    "\035\052\026\054\041\061\042\111\030\120\034\123\037" +
    "\001\002\000\042\011\031\013\017\027\016\033\036\034" +
    "\027\045\021\046\015\047\024\050\035\052\026\054\041" +
    "\060\203\061\042\111\030\120\034\123\037\001\002\000" +
    "\042\011\uffb5\013\uffb5\027\uffb5\033\uffb5\034\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\052\uffb5\054\uffb5\060\uffb5\061" +
    "\uffb5\111\uffb5\120\uffb5\123\uffb5\001\002\000\004\047\045" +
    "\001\002\000\004\052\215\001\002\000\004\052\212\001" +
    "\002\000\004\047\045\001\002\000\004\104\211\001\002" +
    "\000\042\011\uffe0\013\uffe0\027\uffe0\033\uffe0\034\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\060\uffe0" +
    "\061\uffe0\111\uffe0\120\uffe0\123\uffe0\001\002\000\004\047" +
    "\045\001\002\000\004\104\214\001\002\000\042\011\uffde" +
    "\013\uffde\027\uffde\033\uffde\034\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\052\uffde\054\uffde\060\uffde\061\uffde\111\uffde" +
    "\120\uffde\123\uffde\001\002\000\004\047\045\001\002\000" +
    "\004\104\217\001\002\000\042\011\uffdc\013\uffdc\027\uffdc" +
    "\033\uffdc\034\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\052" +
    "\uffdc\054\uffdc\060\uffdc\061\uffdc\111\uffdc\120\uffdc\123\uffdc" +
    "\001\002\000\004\104\221\001\002\000\042\011\uffd7\013" +
    "\uffd7\027\uffd7\033\uffd7\034\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\054\uffd7\060\uffd7\061\uffd7\111\uffd7\120" +
    "\uffd7\123\uffd7\001\002\000\042\011\uffeb\013\uffeb\027\uffeb" +
    "\033\uffeb\034\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052" +
    "\uffeb\054\uffeb\060\uffeb\061\uffeb\111\uffeb\120\uffeb\123\uffeb" +
    "\001\002\000\004\104\224\001\002\000\042\011\uffd6\013" +
    "\uffd6\027\uffd6\033\uffd6\034\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\052\uffd6\054\uffd6\060\uffd6\061\uffd6\111\uffd6\120" +
    "\uffd6\123\uffd6\001\002\000\004\047\045\001\002\000\004" +
    "\104\227\001\002\000\042\011\uffdf\013\uffdf\027\uffdf\033" +
    "\uffdf\034\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf" +
    "\054\uffdf\060\uffdf\061\uffdf\111\uffdf\120\uffdf\123\uffdf\001" +
    "\002\000\004\104\231\001\002\000\042\011\uffdb\013\uffdb" +
    "\027\uffdb\033\uffdb\034\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\052\uffdb\054\uffdb\060\uffdb\061\uffdb\111\uffdb\120\uffdb" +
    "\123\uffdb\001\002\000\004\104\233\001\002\000\042\011" +
    "\uffe1\013\uffe1\027\uffe1\033\uffe1\034\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\052\uffe1\054\uffe1\060\uffe1\061\uffe1\111" +
    "\uffe1\120\uffe1\123\uffe1\001\002\000\004\077\257\001\002" +
    "\000\004\077\256\001\002\000\004\077\255\001\002\000" +
    "\006\103\uffaf\104\uffaf\001\002\000\006\103\uffae\104\uffae" +
    "\001\002\000\004\077\254\001\002\000\004\077\253\001" +
    "\002\000\004\047\244\001\002\000\016\031\245\073\251" +
    "\103\uffa8\104\uffa8\107\247\112\250\001\002\000\004\047" +
    "\uffd2\001\002\000\004\047\252\001\002\000\004\047\uffd4" +
    "\001\002\000\004\047\uffd5\001\002\000\004\047\uffd3\001" +
    "\002\000\006\103\uffa7\104\uffa7\001\002\000\006\103\uffac" +
    "\104\uffac\001\002\000\006\103\uffab\104\uffab\001\002\000" +
    "\006\103\uffaa\104\uffaa\001\002\000\006\103\uffa9\104\uffa9" +
    "\001\002\000\006\103\uffad\104\uffad\001\002\000\004\002" +
    "\ufff8\001\002\000\004\104\262\001\002\000\042\011\uffd9" +
    "\013\uffd9\027\uffd9\033\uffd9\034\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\052\uffd9\054\uffd9\060\uffd9\061\uffd9\111\uffd9" +
    "\120\uffd9\123\uffd9\001\002\000\004\104\264\001\002\000" +
    "\042\011\uffd8\013\uffd8\027\uffd8\033\uffd8\034\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\052\uffd8\054\uffd8\060\uffd8\061" +
    "\uffd8\111\uffd8\120\uffd8\123\uffd8\001\002\000\006\103\uffb0" +
    "\104\uffb0\001\002\000\006\047\270\052\271\001\002\000" +
    "\004\104\277\001\002\000\006\051\275\104\uffb3\001\002" +
    "\000\004\047\272\001\002\000\004\051\273\001\002\000" +
    "\004\077\274\001\002\000\004\104\uffb4\001\002\000\004" +
    "\077\276\001\002\000\004\104\uffb2\001\002\000\020\016" +
    "\104\044\100\047\077\076\074\077\102\102\076\117\101" +
    "\001\002\000\004\104\301\001\002\000\010\027\016\047" +
    "\024\054\041\001\002\000\004\103\303\001\002\000\004" +
    "\057\304\001\002\000\040\011\031\013\017\027\016\033" +
    "\036\034\027\045\021\046\015\047\024\050\035\052\026" +
    "\054\041\061\042\111\030\120\034\123\037\001\002\000" +
    "\042\011\031\013\017\027\016\033\036\034\027\045\021" +
    "\046\015\047\024\050\035\052\026\054\041\060\306\061" +
    "\042\111\030\120\034\123\037\001\002\000\042\011\uffa6" +
    "\013\uffa6\027\uffa6\033\uffa6\034\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\052\uffa6\054\uffa6\060\uffa6\061\uffa6\111\uffa6" +
    "\120\uffa6\123\uffa6\001\002\000\004\002\001\001\002\000" +
    "\006\016\311\066\312\001\002\000\004\047\320\001\002" +
    "\000\004\047\313\001\002\000\006\065\314\105\315\001" +
    "\002\000\010\052\ufffe\100\ufffe\121\ufffe\001\002\000\004" +
    "\047\316\001\002\000\004\065\317\001\002\000\010\052" +
    "\000\100\000\121\000\001\002\000\004\105\321\001\002" +
    "\000\004\047\322\001\002\000\004\016\323\001\002\000" +
    "\010\052\uffff\100\uffff\121\uffff\001\002\000\004\103\325" +
    "\001\002\000\004\057\326\001\002\000\040\011\031\013" +
    "\017\027\016\033\036\034\027\045\021\046\015\047\024" +
    "\050\035\052\026\054\041\061\042\111\030\120\034\123" +
    "\037\001\002\000\042\011\031\013\017\027\016\033\036" +
    "\034\027\045\021\046\015\047\024\050\035\052\026\054" +
    "\041\060\330\061\042\111\030\120\034\123\037\001\002" +
    "\000\004\002\ufff7\001\002\000\004\075\356\001\002\000" +
    "\004\053\342\001\002\000\004\062\334\001\002\000\004" +
    "\102\335\001\002\000\004\103\336\001\002\000\004\057" +
    "\337\001\002\000\040\011\031\013\017\027\016\033\036" +
    "\034\027\045\021\046\015\047\024\050\035\052\026\054" +
    "\041\061\042\111\030\120\034\123\037\001\002\000\042" +
    "\011\031\013\017\027\016\033\036\034\027\045\021\046" +
    "\015\047\024\050\035\052\026\054\041\060\341\061\042" +
    "\111\030\120\034\123\037\001\002\000\004\002\ufff9\001" +
    "\002\000\006\016\343\066\344\001\002\000\004\047\352" +
    "\001\002\000\004\047\345\001\002\000\006\065\346\105" +
    "\347\001\002\000\010\052\ufffb\100\ufffb\121\ufffb\001\002" +
    "\000\004\047\350\001\002\000\004\065\351\001\002\000" +
    "\010\052\ufffd\100\ufffd\121\ufffd\001\002\000\004\105\353" +
    "\001\002\000\004\047\354\001\002\000\004\016\355\001" +
    "\002\000\010\052\ufffc\100\ufffc\121\ufffc\001\002\000\004" +
    "\113\357\001\002\000\004\104\360\001\002\000\004\052" +
    "\361\001\002\000\004\062\362\001\002\000\004\102\363" +
    "\001\002\000\004\103\364\001\002\000\004\057\365\001" +
    "\002\000\040\011\031\013\017\027\016\033\036\034\027" +
    "\045\021\046\015\047\024\050\035\052\026\054\041\061" +
    "\042\111\030\120\034\123\037\001\002\000\042\011\031" +
    "\013\017\027\016\033\036\034\027\045\021\046\015\047" +
    "\024\050\035\052\026\054\041\060\367\061\042\111\030" +
    "\120\034\123\037\001\002\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\002\006\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\021\004\022\005\024\006\037" +
    "\016\032\017\017\020\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\262\001\001\000\002\001\001" +
    "\000\004\012\260\001\001\000\016\004\136\005\137\006" +
    "\143\016\142\017\135\020\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\231\001" +
    "\001\000\004\012\227\001\001\000\002\001\001\000\004" +
    "\012\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\066\001\001\000\004\012\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\060\001\001" +
    "\000\002\001\001\000\004\012\062\001\001\000\002\001" +
    "\001\000\004\012\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\072\010\102\014\074\001\001\000\002" +
    "\001\001\000\004\010\146\001\001\000\002\001\001\000" +
    "\006\007\127\010\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\125\001\001\000\002\001\001\000\010\007\072\010\102" +
    "\014\123\001\001\000\002\001\001\000\010\007\072\010" +
    "\102\014\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\134\004\022\005\024\006\037\016\032\017" +
    "\017\020\031\001\001\000\016\004\136\005\137\006\143" +
    "\016\142\017\135\020\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\153\010\130\001\001\000\004\011\147" +
    "\001\001\000\004\010\151\001\001\000\004\010\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\072\010\102\014\160\001" +
    "\001\000\010\007\072\010\102\014\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\162\004\022\005" +
    "\024\006\037\016\032\017\017\020\031\001\001\000\016" +
    "\004\136\005\137\006\143\016\142\017\135\020\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\072" +
    "\010\102\014\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\072\010\102\014\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\175\004\022\005\024\006\037\016\032\017\017\020\031" +
    "\001\001\000\016\004\136\005\137\006\143\016\142\017" +
    "\135\020\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\201\004\022\005\024\006\037\016\032\017" +
    "\017\020\031\001\001\000\016\004\136\005\137\006\143" +
    "\016\142\017\135\020\141\001\001\000\002\001\001\000" +
    "\004\012\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\072\010\102\014\277\001\001\000" +
    "\002\001\001\000\004\016\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\304\004\022\005\024\006" +
    "\037\016\032\017\017\020\031\001\001\000\016\004\136" +
    "\005\137\006\143\016\142\017\135\020\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\326\004\022\005\024\006\037\016\032\017\017\020" +
    "\031\001\001\000\016\004\136\005\137\006\143\016\142" +
    "\017\135\020\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\337\004" +
    "\022\005\024\006\037\016\032\017\017\020\031\001\001" +
    "\000\016\004\136\005\137\006\143\016\142\017\135\020" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\365\004\022\005\024" +
    "\006\037\016\032\017\017\020\031\001\001\000\016\004" +
    "\136\005\137\006\143\016\142\017\135\020\141\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Igual Identificador OPERADORES_ARITMETICOS Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONES_COMPLEMENTARIAS ::= Identificador ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACIONES_COMPLEMENTARIAS ::= Identificador DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERACIONES_COMPLEMENTARIAS ::= Identificador MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERACIONES_COMPLEMENTARIAS ::= Identificador MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACIONES_COMPLEMENTARIAS ::= Identificador MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACIONES_COMPLEMENTARIAS ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACIONES_COMPLEMENTARIAS ::= Decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACIONES_COMPLEMENTARIAS ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_PARTE_UNO ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR_PARTE_UNO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FOR_PARTE_UNO ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA_SIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Cadena DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

