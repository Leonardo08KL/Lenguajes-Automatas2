
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 27 18:24:10 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 27 18:24:10 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\013\011\000\002\013" +
    "\011\000\002\013\007\000\002\013\012\000\002\013\012" +
    "\000\002\013\010\000\002\002\016\000\002\002\012\000" +
    "\002\002\011\000\002\002\010\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\012\005\000\002\012\007" +
    "\000\002\012\006\000\002\012\010\000\002\012\007\000" +
    "\002\012\011\000\002\012\005\000\002\012\003\000\002" +
    "\004\005\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\007\000\002\004\005" +
    "\000\002\004\006\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\004\000\002" +
    "\007\006\000\002\007\005\000\002\007\006\000\002\007" +
    "\007\000\002\007\005\000\002\007\006\000\002\007\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\005\011\000\002\005\015\000\002\015\006\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\006\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\010\052\010\062\005\100\006\001\002\000" +
    "\010\052\304\100\303\121\302\001\002\000\004\102\275" +
    "\001\002\000\004\053\261\001\002\000\004\002\260\001" +
    "\002\000\004\062\011\001\002\000\004\102\012\001\002" +
    "\000\004\103\013\001\002\000\004\057\014\001\002\000" +
    "\026\011\023\013\024\034\032\045\016\046\031\050\017" +
    "\052\027\061\025\111\015\120\022\001\002\000\004\052" +
    "\255\001\002\000\004\047\033\001\002\000\004\102\241" +
    "\001\002\000\030\011\ufff1\013\ufff1\034\ufff1\045\ufff1\046" +
    "\ufff1\050\ufff1\052\ufff1\060\ufff1\061\ufff1\111\ufff1\120\ufff1" +
    "\001\002\000\030\011\ufff5\013\ufff5\034\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\052\ufff5\060\ufff5\061\ufff5\111\ufff5\120\ufff5" +
    "\001\002\000\012\013\223\052\226\061\224\111\225\001" +
    "\002\000\004\047\033\001\002\000\004\047\033\001\002" +
    "\000\006\034\211\052\212\001\002\000\030\011\ufff3\013" +
    "\ufff3\034\ufff3\045\ufff3\046\ufff3\050\ufff3\052\ufff3\060\ufff3" +
    "\061\ufff3\111\ufff3\120\ufff3\001\002\000\004\047\033\001" +
    "\002\000\030\011\023\013\024\034\032\045\016\046\031" +
    "\050\017\052\027\060\206\061\025\111\015\120\022\001" +
    "\002\000\004\102\054\001\002\000\004\047\033\001\002" +
    "\000\010\015\036\051\037\104\uffe9\001\002\000\004\104" +
    "\035\001\002\000\030\011\uffe2\013\uffe2\034\uffe2\045\uffe2" +
    "\046\uffe2\050\uffe2\052\uffe2\060\uffe2\061\uffe2\111\uffe2\120" +
    "\uffe2\001\002\000\004\047\033\001\002\000\006\016\041" +
    "\077\040\001\002\000\006\015\051\104\ufff0\001\002\000" +
    "\006\016\042\047\043\001\002\000\006\015\047\104\uffee" +
    "\001\002\000\004\016\044\001\002\000\006\015\045\104" +
    "\uffec\001\002\000\004\047\033\001\002\000\004\104\uffeb" +
    "\001\002\000\004\047\033\001\002\000\004\104\uffed\001" +
    "\002\000\004\047\033\001\002\000\004\104\uffef\001\002" +
    "\000\004\104\uffea\001\002\000\006\047\056\052\057\001" +
    "\002\000\004\104\065\001\002\000\006\051\063\104\uffbe" +
    "\001\002\000\004\047\060\001\002\000\004\051\061\001" +
    "\002\000\004\077\062\001\002\000\004\104\uffbf\001\002" +
    "\000\004\077\064\001\002\000\004\104\uffbd\001\002\000" +
    "\020\016\077\044\072\047\071\076\067\077\075\102\073" +
    "\117\074\001\002\000\012\101\202\103\uffc7\104\uffc7\124" +
    "\203\001\002\000\016\016\077\044\072\047\071\077\075" +
    "\102\172\117\074\001\002\000\004\104\126\001\002\000" +
    "\032\005\uffd2\006\uffd2\017\uffd2\030\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\101\uffd2\103\uffd2\104\uffd2\124\uffd2\001" +
    "\002\000\032\005\uffd3\006\uffd3\017\uffd3\030\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\101\uffd3\103\uffd3\104\uffd3\124" +
    "\uffd3\001\002\000\020\016\077\044\072\047\071\076\067" +
    "\077\075\102\073\117\074\001\002\000\032\005\uffd4\006" +
    "\uffd4\017\uffd4\030\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4" +
    "\101\uffd4\103\uffd4\104\uffd4\124\uffd4\001\002\000\032\005" +
    "\uffd1\006\uffd1\017\uffd1\030\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\101\uffd1\103\uffd1\104\uffd1\124\uffd1\001\002\000" +
    "\032\005\105\006\111\017\115\030\113\065\103\066\114" +
    "\067\112\070\107\101\106\103\uffc6\104\uffc6\124\110\001" +
    "\002\000\006\016\100\047\101\001\002\000\032\005\uffcf" +
    "\006\uffcf\017\uffcf\030\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\101\uffcf\103\uffcf\104\uffcf\124\uffcf\001\002\000\004" +
    "\016\102\001\002\000\032\005\uffd0\006\uffd0\017\uffd0\030" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\101\uffd0\103\uffd0" +
    "\104\uffd0\124\uffd0\001\002\000\016\016\uffd5\044\uffd5\047" +
    "\uffd5\076\uffd5\077\uffd5\117\uffd5\001\002\000\016\016\077" +
    "\044\072\047\071\076\120\077\075\117\074\001\002\000" +
    "\016\016\uffdb\044\uffdb\047\uffdb\076\uffdb\077\uffdb\117\uffdb" +
    "\001\002\000\020\016\077\044\072\047\071\076\067\077" +
    "\075\102\073\117\074\001\002\000\016\016\uffd9\044\uffd9" +
    "\047\uffd9\076\uffd9\077\uffd9\117\uffd9\001\002\000\020\016" +
    "\077\044\072\047\071\076\067\077\075\102\073\117\074" +
    "\001\002\000\016\016\uffdc\044\uffdc\047\uffdc\076\uffdc\077" +
    "\uffdc\117\uffdc\001\002\000\016\016\uffd8\044\uffd8\047\uffd8" +
    "\076\uffd8\077\uffd8\117\uffd8\001\002\000\016\016\uffd7\044" +
    "\uffd7\047\uffd7\076\uffd7\077\uffd7\117\uffd7\001\002\000\016" +
    "\016\uffd6\044\uffd6\047\uffd6\076\uffd6\077\uffd6\117\uffd6\001" +
    "\002\000\016\016\uffda\044\uffda\047\uffda\076\uffda\077\uffda" +
    "\117\uffda\001\002\000\006\103\uffc3\104\uffc3\001\002\000" +
    "\006\103\uffc2\104\uffc2\001\002\000\014\016\077\044\072" +
    "\047\071\077\075\117\074\001\002\000\012\101\uffcd\103" +
    "\uffcd\104\uffcd\124\uffcd\001\002\000\012\101\uffcc\103\uffcc" +
    "\104\uffcc\124\uffcc\001\002\000\004\103\125\001\002\000" +
    "\022\005\105\006\111\017\115\030\113\065\103\066\114" +
    "\067\112\070\107\001\002\000\012\101\uffca\103\uffca\104" +
    "\uffca\124\uffca\001\002\000\010\027\131\047\132\054\127" +
    "\001\002\000\004\047\171\001\002\000\004\103\162\001" +
    "\002\000\004\047\161\001\002\000\022\027\137\032\135" +
    "\051\142\054\136\063\133\064\141\072\134\074\140\001" +
    "\002\000\004\077\160\001\002\000\004\077\157\001\002" +
    "\000\004\077\156\001\002\000\004\103\uffba\001\002\000" +
    "\004\103\uffb9\001\002\000\004\077\155\001\002\000\004" +
    "\077\154\001\002\000\004\047\143\001\002\000\012\031" +
    "\144\073\147\107\145\112\146\001\002\000\004\047\153" +
    "\001\002\000\004\047\152\001\002\000\004\047\151\001" +
    "\002\000\004\047\150\001\002\000\004\103\uffb0\001\002" +
    "\000\004\103\uffb3\001\002\000\004\103\uffb2\001\002\000" +
    "\004\103\uffb1\001\002\000\004\103\uffb7\001\002\000\004" +
    "\103\uffb6\001\002\000\004\103\uffb5\001\002\000\004\103" +
    "\uffb4\001\002\000\004\103\uffb8\001\002\000\004\103\uffbb" +
    "\001\002\000\004\057\163\001\002\000\026\011\023\013" +
    "\024\034\032\045\016\046\031\050\017\052\027\061\025" +
    "\111\015\120\022\001\002\000\030\011\023\013\024\034" +
    "\032\045\016\046\031\050\017\052\027\060\170\061\025" +
    "\111\015\120\022\001\002\000\030\011\ufff2\013\ufff2\034" +
    "\ufff2\045\ufff2\046\ufff2\050\ufff2\052\ufff2\060\ufff2\061\ufff2" +
    "\111\ufff2\120\ufff2\001\002\000\030\011\ufff6\013\ufff6\034" +
    "\ufff6\045\ufff6\046\ufff6\050\ufff6\052\ufff6\060\ufff6\061\ufff6" +
    "\111\ufff6\120\ufff6\001\002\000\030\011\ufff4\013\ufff4\034" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\052\ufff4\060\ufff4\061\ufff4" +
    "\111\ufff4\120\ufff4\001\002\000\030\011\uffaf\013\uffaf\034" +
    "\uffaf\045\uffaf\046\uffaf\050\uffaf\052\uffaf\060\uffaf\061\uffaf" +
    "\111\uffaf\120\uffaf\001\002\000\004\103\uffbc\001\002\000" +
    "\020\016\077\044\072\047\071\076\067\077\075\102\073" +
    "\117\074\001\002\000\032\005\105\006\111\017\115\030" +
    "\113\065\103\066\114\067\112\070\107\101\uffc8\103\uffc8" +
    "\104\uffc8\124\uffc8\001\002\000\016\016\077\044\072\047" +
    "\071\076\175\077\075\117\074\001\002\000\014\016\077" +
    "\044\072\047\071\077\075\117\074\001\002\000\012\101" +
    "\uffce\103\uffce\104\uffce\124\uffce\001\002\000\012\101\uffcb" +
    "\103\uffcb\104\uffcb\124\uffcb\001\002\000\004\103\201\001" +
    "\002\000\012\101\uffc9\103\uffc9\104\uffc9\124\uffc9\001\002" +
    "\000\020\016\077\044\072\047\071\076\067\077\075\102" +
    "\073\117\074\001\002\000\020\016\077\044\072\047\071" +
    "\076\067\077\075\102\073\117\074\001\002\000\006\103" +
    "\uffc5\104\uffc5\001\002\000\006\103\uffc4\104\uffc4\001\002" +
    "\000\004\002\ufff8\001\002\000\004\104\210\001\002\000" +
    "\030\011\uffe8\013\uffe8\034\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\052\uffe8\060\uffe8\061\uffe8\111\uffe8\120\uffe8\001\002\000" +
    "\004\047\033\001\002\000\004\047\033\001\002\000\004" +
    "\104\214\001\002\000\030\011\uffe4\013\uffe4\034\uffe4\045" +
    "\uffe4\046\uffe4\050\uffe4\052\uffe4\060\uffe4\061\uffe4\111\uffe4" +
    "\120\uffe4\001\002\000\004\104\216\001\002\000\030\011" +
    "\uffe1\013\uffe1\034\uffe1\045\uffe1\046\uffe1\050\uffe1\052\uffe1" +
    "\060\uffe1\061\uffe1\111\uffe1\120\uffe1\001\002\000\004\104" +
    "\220\001\002\000\030\011\uffdf\013\uffdf\034\uffdf\045\uffdf" +
    "\046\uffdf\050\uffdf\052\uffdf\060\uffdf\061\uffdf\111\uffdf\120" +
    "\uffdf\001\002\000\004\104\222\001\002\000\030\011\uffdd" +
    "\013\uffdd\034\uffdd\045\uffdd\046\uffdd\050\uffdd\052\uffdd\060" +
    "\uffdd\061\uffdd\111\uffdd\120\uffdd\001\002\000\004\047\033" +
    "\001\002\000\004\052\234\001\002\000\004\052\231\001" +
    "\002\000\004\047\033\001\002\000\004\104\230\001\002" +
    "\000\030\011\uffe7\013\uffe7\034\uffe7\045\uffe7\046\uffe7\050" +
    "\uffe7\052\uffe7\060\uffe7\061\uffe7\111\uffe7\120\uffe7\001\002" +
    "\000\004\047\033\001\002\000\004\104\233\001\002\000" +
    "\030\011\uffe5\013\uffe5\034\uffe5\045\uffe5\046\uffe5\050\uffe5" +
    "\052\uffe5\060\uffe5\061\uffe5\111\uffe5\120\uffe5\001\002\000" +
    "\004\047\033\001\002\000\004\104\236\001\002\000\030" +
    "\011\uffe3\013\uffe3\034\uffe3\045\uffe3\046\uffe3\050\uffe3\052" +
    "\uffe3\060\uffe3\061\uffe3\111\uffe3\120\uffe3\001\002\000\004" +
    "\104\240\001\002\000\030\011\uffde\013\uffde\034\uffde\045" +
    "\uffde\046\uffde\050\uffde\052\uffde\060\uffde\061\uffde\111\uffde" +
    "\120\uffde\001\002\000\020\016\077\044\072\047\071\076" +
    "\067\077\075\102\073\117\074\001\002\000\004\103\243" +
    "\001\002\000\004\057\244\001\002\000\026\011\023\013" +
    "\024\034\032\045\016\046\031\050\017\052\027\061\025" +
    "\111\015\120\022\001\002\000\030\011\023\013\024\034" +
    "\032\045\016\046\031\050\017\052\027\060\246\061\025" +
    "\111\015\120\022\001\002\000\032\011\uffc1\013\uffc1\034" +
    "\uffc1\040\247\045\uffc1\046\uffc1\050\uffc1\052\uffc1\060\uffc1" +
    "\061\uffc1\111\uffc1\120\uffc1\001\002\000\004\057\250\001" +
    "\002\000\026\011\023\013\024\034\032\045\016\046\031" +
    "\050\017\052\027\061\025\111\015\120\022\001\002\000" +
    "\030\011\023\013\024\034\032\045\016\046\031\050\017" +
    "\052\027\060\252\061\025\111\015\120\022\001\002\000" +
    "\030\011\uffc0\013\uffc0\034\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\052\uffc0\060\uffc0\061\uffc0\111\uffc0\120\uffc0\001\002\000" +
    "\004\104\254\001\002\000\030\011\uffe0\013\uffe0\034\uffe0" +
    "\045\uffe0\046\uffe0\050\uffe0\052\uffe0\060\uffe0\061\uffe0\111" +
    "\uffe0\120\uffe0\001\002\000\004\047\033\001\002\000\004" +
    "\104\257\001\002\000\030\011\uffe6\013\uffe6\034\uffe6\045" +
    "\uffe6\046\uffe6\050\uffe6\052\uffe6\060\uffe6\061\uffe6\111\uffe6" +
    "\120\uffe6\001\002\000\004\002\001\001\002\000\006\016" +
    "\262\066\263\001\002\000\004\047\271\001\002\000\004" +
    "\047\264\001\002\000\006\065\265\105\266\001\002\000" +
    "\010\052\ufffe\100\ufffe\121\ufffe\001\002\000\004\047\267" +
    "\001\002\000\004\065\270\001\002\000\010\052\000\100" +
    "\000\121\000\001\002\000\004\105\272\001\002\000\004" +
    "\047\273\001\002\000\004\016\274\001\002\000\010\052" +
    "\uffff\100\uffff\121\uffff\001\002\000\004\103\276\001\002" +
    "\000\004\057\277\001\002\000\026\011\023\013\024\034" +
    "\032\045\016\046\031\050\017\052\027\061\025\111\015" +
    "\120\022\001\002\000\030\011\023\013\024\034\032\045" +
    "\016\046\031\050\017\052\027\060\301\061\025\111\015" +
    "\120\022\001\002\000\004\002\ufff7\001\002\000\004\075" +
    "\327\001\002\000\004\053\313\001\002\000\004\062\305" +
    "\001\002\000\004\102\306\001\002\000\004\103\307\001" +
    "\002\000\004\057\310\001\002\000\026\011\023\013\024" +
    "\034\032\045\016\046\031\050\017\052\027\061\025\111" +
    "\015\120\022\001\002\000\030\011\023\013\024\034\032" +
    "\045\016\046\031\050\017\052\027\060\312\061\025\111" +
    "\015\120\022\001\002\000\004\002\ufff9\001\002\000\006" +
    "\016\314\066\315\001\002\000\004\047\323\001\002\000" +
    "\004\047\316\001\002\000\006\065\317\105\320\001\002" +
    "\000\010\052\ufffb\100\ufffb\121\ufffb\001\002\000\004\047" +
    "\321\001\002\000\004\065\322\001\002\000\010\052\ufffd" +
    "\100\ufffd\121\ufffd\001\002\000\004\105\324\001\002\000" +
    "\004\047\325\001\002\000\004\016\326\001\002\000\010" +
    "\052\ufffc\100\ufffc\121\ufffc\001\002\000\004\113\330\001" +
    "\002\000\004\104\331\001\002\000\004\052\332\001\002" +
    "\000\004\062\333\001\002\000\004\102\334\001\002\000" +
    "\004\103\335\001\002\000\004\057\336\001\002\000\026" +
    "\011\023\013\024\034\032\045\016\046\031\050\017\052" +
    "\027\061\025\111\015\120\022\001\002\000\030\011\023" +
    "\013\024\034\032\045\016\046\031\050\017\052\027\060" +
    "\340\061\025\111\015\120\022\001\002\000\004\002\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\002\006\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\027\004\020\005\025\006\017" +
    "\001\001\000\002\001\001\000\004\012\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\220\001\001\000\004\012\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\206" +
    "\001\001\000\010\004\165\005\166\006\164\001\001\000" +
    "\002\001\001\000\004\012\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\045\001\001\000\002\001\001\000\004\012\047" +
    "\001\001\000\002\001\001\000\004\012\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\065\010\075\014" +
    "\067\001\001\000\002\001\001\000\004\010\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\122\010\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\120\001\001\000\002\001\001\000" +
    "\010\007\065\010\075\014\116\001\001\000\002\001\001" +
    "\000\010\007\065\010\075\014\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\103\001\001\000\002\001" +
    "\001\000\004\016\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\163\004\020\005\025\006\017\001" +
    "\001\000\010\004\165\005\166\006\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\177\010\123\001\001" +
    "\000\004\011\173\001\001\000\004\010\175\001\001\000" +
    "\004\010\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\065\010" +
    "\075\014\204\001\001\000\010\007\065\010\075\014\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\214" +
    "\001\001\000\004\012\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\065\010\075\014\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\244\004\020\005\025" +
    "\006\017\001\001\000\010\004\165\005\166\006\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\250" +
    "\004\020\005\025\006\017\001\001\000\010\004\165\005" +
    "\166\006\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\277\004\020\005\025\006\017\001\001\000" +
    "\010\004\165\005\166\006\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\310\004\020\005\025\006\017\001\001\000\010\004" +
    "\165\005\166\006\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\336" +
    "\004\020\005\025\006\017\001\001\000\010\004\165\005" +
    "\166\006\164\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma FOR_PARTE_TRES Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FOR_PARTE_TRES ::= Identificador Igual Identificador Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR_PARTE_TRES ::= Identificador Igual Identificador Division Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_PARTE_TRES ::= Identificador Igual Identificador Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR_PARTE_TRES ::= Identificador Igual Identificador Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FOR_PARTE_TRES ::= Identificador ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FOR_PARTE_TRES ::= Identificador DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR_PARTE_TRES ::= Identificador MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR_PARTE_TRES ::= Identificador MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR_PARTE_TRES ::= Identificador MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR_PARTE_TRES ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR_PARTE_TRES ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR_PARTE_TRES ::= Decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR_PARTE_TRES ::= Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_TRES",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FOR_PARTE_UNO ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FOR_PARTE_UNO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR_PARTE_UNO ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA_SIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

