
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 29 16:46:16 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 29 16:46:16 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\013\011\000\002\013" +
    "\011\000\002\013\007\000\002\013\007\000\002\013\012" +
    "\000\002\013\012\000\002\013\010\000\002\013\010\000" +
    "\002\002\016\000\002\002\012\000\002\002\011\000\002" +
    "\002\010\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\012\005" +
    "\000\002\012\007\000\002\012\006\000\002\012\010\000" +
    "\002\012\007\000\002\012\011\000\002\012\005\000\002" +
    "\012\005\000\002\012\007\000\002\012\007\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\030\005" +
    "\000\002\030\003\000\002\030\007\000\002\030\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\032\013\000\002\032\011\000\002\032\014\000\002\032" +
    "\012\000\002\032\010\000\002\032\006\000\002\004\005" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\007\000\002\004\005\000\002" +
    "\004\006\000\002\004\005\000\002\004\005\000\002\004" +
    "\006\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\005\000\002\010" +
    "\004\000\002\010\005\000\002\007\006\000\002\007\005" +
    "\000\002\007\006\000\002\007\007\000\002\007\005\000" +
    "\002\007\006\000\002\007\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\005\011\000\002\005\015" +
    "\000\002\005\013\000\002\015\006\000\002\015\003\000" +
    "\002\015\005\000\002\033\003\000\002\033\012\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\007\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\006\015\000\002\017\011\000\002\020\013\000" +
    "\002\022\006\000\002\023\003\000\002\023\005\000\002" +
    "\023\004\000\002\023\007\000\002\023\006\000\002\023" +
    "\005\000\002\023\003\000\002\025\003\000\002\025\005" +
    "\000\002\024\006\000\002\026\010\000\002\026\012\000" +
    "\002\026\011\000\002\026\010\000\002\026\011\000\002" +
    "\026\013\000\002\026\011\000\002\026\012\000\002\027" +
    "\016\000\002\027\014\000\002\027\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\010\052\010\062\005\100\006\001\002\000" +
    "\010\052\u017f\100\u017e\121\u017d\001\002\000\004\102\u0178" +
    "\001\002\000\004\053\u016a\001\002\000\004\002\u0169\001" +
    "\002\000\004\062\011\001\002\000\004\102\012\001\002" +
    "\000\004\103\013\001\002\000\004\057\014\001\002\000" +
    "\050\004\042\011\035\013\017\014\034\024\043\027\016" +
    "\033\046\034\032\045\021\046\015\047\027\050\041\052" +
    "\030\054\052\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\004\102\u0158\001\002\000\004\047\027\001" +
    "\002\000\004\047\u011b\001\002\000\054\004\uffed\007\uffed" +
    "\011\uffed\013\uffed\014\uffed\024\uffed\027\uffed\033\uffed\034" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed" +
    "\060\uffed\061\uffed\111\uffed\115\uffed\120\uffed\123\uffed\001" +
    "\002\000\004\047\056\001\002\000\054\004\uffe5\007\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\024\uffe5\027\uffe5\033\uffe5\034" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\054\uffe5" +
    "\060\uffe5\061\uffe5\111\uffe5\115\uffe5\120\uffe5\123\uffe5\001" +
    "\002\000\052\004\042\011\035\013\017\014\034\024\043" +
    "\027\016\033\046\034\032\045\021\046\015\047\027\050" +
    "\041\052\030\054\052\060\u0150\061\053\111\033\115\045" +
    "\120\040\123\051\001\002\000\054\004\ufff3\007\ufff3\011" +
    "\ufff3\013\ufff3\014\ufff3\024\ufff3\027\ufff3\033\ufff3\034\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\060" +
    "\ufff3\061\ufff3\111\ufff3\115\ufff3\120\ufff3\123\ufff3\001\002" +
    "\000\054\004\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb\024" +
    "\uffbb\027\uffbb\033\uffbb\034\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\052\uffbb\054\uffbb\060\uffbb\061\uffbb\111\uffbb\115" +
    "\uffbb\120\uffbb\123\uffbb\001\002\000\054\004\uffe3\007\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\024\uffe3\027\uffe3\033\uffe3\034" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\054\uffe3" +
    "\060\uffe3\061\uffe3\111\uffe3\115\uffe3\120\uffe3\123\uffe3\001" +
    "\002\000\074\005\uff8f\006\uff8f\017\uff8f\022\u0149\027\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\035\uff8f\036\uff8f\037\uff8f\051" +
    "\uff8f\054\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\101\uff8f\103" +
    "\uff8f\104\uff8f\107\uff8f\112\uff8f\124\uff8f\001\002\000\004" +
    "\047\u011b\001\002\000\054\004\ufff1\007\ufff1\011\ufff1\013" +
    "\ufff1\014\ufff1\024\ufff1\027\ufff1\033\ufff1\034\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1\060\ufff1\061" +
    "\ufff1\111\ufff1\115\ufff1\120\ufff1\123\ufff1\001\002\000\004" +
    "\047\056\001\002\000\004\052\u0140\001\002\000\004\035" +
    "\u013a\001\002\000\004\047\u011b\001\002\000\054\004\uffeb" +
    "\007\uffeb\011\uffeb\013\uffeb\014\uffeb\024\uffeb\027\uffeb\033" +
    "\uffeb\034\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb" +
    "\054\uffeb\060\uffeb\061\uffeb\111\uffeb\115\uffeb\120\uffeb\123" +
    "\uffeb\001\002\000\004\104\u0119\001\002\000\012\013\u010b" +
    "\052\u010e\061\u010c\111\u010d\001\002\000\004\102\u0100\001" +
    "\002\000\004\047\056\001\002\000\004\036\357\001\002" +
    "\000\022\027\331\032\330\051\334\054\327\063\325\064" +
    "\333\072\326\074\332\001\002\000\004\102\232\001\002" +
    "\000\004\057\222\001\002\000\054\004\uffe7\007\uffe7\011" +
    "\uffe7\013\uffe7\014\uffe7\024\uffe7\027\uffe7\033\uffe7\034\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\054\uffe7\060" +
    "\uffe7\061\uffe7\111\uffe7\115\uffe7\120\uffe7\123\uffe7\001\002" +
    "\000\054\004\uffef\007\uffef\011\uffef\013\uffef\014\uffef\024" +
    "\uffef\027\uffef\033\uffef\034\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\052\uffef\054\uffef\060\uffef\061\uffef\111\uffef\115" +
    "\uffef\120\uffef\123\uffef\001\002\000\004\102\111\001\002" +
    "\000\004\047\027\001\002\000\006\034\054\052\055\001" +
    "\002\000\004\047\056\001\002\000\004\047\056\001\002" +
    "\000\010\015\061\051\062\104\uffd6\001\002\000\004\104" +
    "\060\001\002\000\054\004\uffc4\007\uffc4\011\uffc4\013\uffc4" +
    "\014\uffc4\024\uffc4\027\uffc4\033\uffc4\034\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\052\uffc4\054\uffc4\060\uffc4\061\uffc4" +
    "\111\uffc4\115\uffc4\120\uffc4\123\uffc4\001\002\000\004\047" +
    "\056\001\002\000\014\016\065\044\064\047\067\077\063" +
    "\117\066\001\002\000\006\015\103\104\uffe2\001\002\000" +
    "\006\015\101\104\uffd7\001\002\000\006\016\072\047\073" +
    "\001\002\000\006\015\070\104\uffd8\001\002\000\004\104" +
    "\uffdb\001\002\000\004\047\056\001\002\000\004\104\uffda" +
    "\001\002\000\006\015\077\104\uffe0\001\002\000\004\016" +
    "\074\001\002\000\006\015\075\104\uffde\001\002\000\004" +
    "\047\056\001\002\000\004\104\uffdd\001\002\000\004\047" +
    "\056\001\002\000\004\104\uffdf\001\002\000\004\047\056" +
    "\001\002\000\004\104\uffd9\001\002\000\004\047\056\001" +
    "\002\000\004\104\uffe1\001\002\000\004\104\uffdc\001\002" +
    "\000\004\104\107\001\002\000\054\004\uffc1\007\uffc1\011" +
    "\uffc1\013\uffc1\014\uffc1\024\uffc1\027\uffc1\033\uffc1\034\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\052\uffc1\054\uffc1\060" +
    "\uffc1\061\uffc1\111\uffc1\115\uffc1\120\uffc1\123\uffc1\001\002" +
    "\000\006\103\uff8d\104\uff8d\001\002\000\020\016\123\044" +
    "\116\047\027\076\113\077\121\102\115\117\117\001\002" +
    "\000\012\101\216\103\uff9b\104\uff9b\124\217\001\002\000" +
    "\016\016\123\044\116\047\027\077\121\102\206\117\117" +
    "\001\002\000\004\103\170\001\002\000\020\016\123\044" +
    "\116\047\027\076\113\077\121\102\115\117\117\001\002" +
    "\000\032\005\uffac\006\uffac\017\uffac\030\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\101\uffac\103\uffac\104\uffac\124\uffac" +
    "\001\002\000\032\005\uffad\006\uffad\017\uffad\030\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\101\uffad\103\uffad\104\uffad" +
    "\124\uffad\001\002\000\044\005\uffab\006\uffab\017\uffab\030" +
    "\uffab\031\152\065\uffab\066\uffab\067\uffab\070\uffab\071\153" +
    "\073\157\101\uffab\103\uffab\104\uffab\107\155\112\156\124" +
    "\uffab\001\002\000\044\005\uffa6\006\uffa6\017\uffa6\030\uffa6" +
    "\031\152\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\153\073" +
    "\157\101\uffa6\103\uffa6\104\uffa6\107\155\112\156\124\uffa6" +
    "\001\002\000\032\005\131\006\135\017\141\030\137\065" +
    "\130\066\140\067\136\070\133\101\132\103\uff9a\104\uff9a" +
    "\124\134\001\002\000\006\016\124\047\125\001\002\000" +
    "\032\005\uffa4\006\uffa4\017\uffa4\030\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\101\uffa4\103\uffa4\104\uffa4\124\uffa4\001" +
    "\002\000\004\016\126\001\002\000\032\005\uffa5\006\uffa5" +
    "\017\uffa5\030\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\101" +
    "\uffa5\103\uffa5\104\uffa5\124\uffa5\001\002\000\020\016\123" +
    "\044\116\047\027\076\144\077\121\102\145\117\117\001" +
    "\002\000\020\016\uffae\044\uffae\047\uffae\076\uffae\077\uffae" +
    "\102\uffae\117\uffae\001\002\000\020\016\uffb4\044\uffb4\047" +
    "\uffb4\076\uffb4\077\uffb4\102\uffb4\117\uffb4\001\002\000\020" +
    "\016\123\044\116\047\027\076\113\077\121\102\115\117" +
    "\117\001\002\000\020\016\uffb2\044\uffb2\047\uffb2\076\uffb2" +
    "\077\uffb2\102\uffb2\117\uffb2\001\002\000\020\016\123\044" +
    "\116\047\027\076\113\077\121\102\115\117\117\001\002" +
    "\000\020\016\uffb5\044\uffb5\047\uffb5\076\uffb5\077\uffb5\102" +
    "\uffb5\117\uffb5\001\002\000\020\016\uffb1\044\uffb1\047\uffb1" +
    "\076\uffb1\077\uffb1\102\uffb1\117\uffb1\001\002\000\020\016" +
    "\uffb0\044\uffb0\047\uffb0\076\uffb0\077\uffb0\102\uffb0\117\uffb0" +
    "\001\002\000\020\016\uffaf\044\uffaf\047\uffaf\076\uffaf\077" +
    "\uffaf\102\uffaf\117\uffaf\001\002\000\020\016\uffb3\044\uffb3" +
    "\047\uffb3\076\uffb3\077\uffb3\102\uffb3\117\uffb3\001\002\000" +
    "\006\103\uff97\104\uff97\001\002\000\006\103\uff96\104\uff96" +
    "\001\002\000\016\016\123\044\116\047\027\077\121\102" +
    "\145\117\117\001\002\000\016\016\123\044\116\047\027" +
    "\077\121\102\145\117\117\001\002\000\012\101\uffa1\103" +
    "\uffa1\104\uffa1\124\uffa1\001\002\000\004\103\150\001\002" +
    "\000\032\005\uffa3\006\uffa3\017\uffa3\030\uffa3\065\uffa3\066" +
    "\uffa3\067\uffa3\070\uffa3\101\uffa3\103\uffa3\104\uffa3\124\uffa3" +
    "\001\002\000\012\101\uffa0\103\uffa0\104\uffa0\124\uffa0\001" +
    "\002\000\006\047\uffb7\077\uffb7\001\002\000\006\047\uffb6" +
    "\077\uffb6\001\002\000\006\047\027\077\160\001\002\000" +
    "\006\047\uffb9\077\uffb9\001\002\000\006\047\uffba\077\uffba" +
    "\001\002\000\006\047\uffb8\077\uffb8\001\002\000\032\005" +
    "\uffa7\006\uffa7\017\uffa7\030\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\101\uffa7\103\uffa7\104\uffa7\124\uffa7\001\002\000" +
    "\032\005\uffa8\006\uffa8\017\uffa8\030\uffa8\065\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\101\uffa8\103\uffa8\104\uffa8\124\uffa8\001" +
    "\002\000\006\047\027\077\163\001\002\000\032\005\uffa9" +
    "\006\uffa9\017\uffa9\030\uffa9\065\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\101\uffa9\103\uffa9\104\uffa9\124\uffa9\001\002\000\032" +
    "\005\uffaa\006\uffaa\017\uffaa\030\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\101\uffaa\103\uffaa\104\uffaa\124\uffaa\001\002" +
    "\000\004\103\167\001\002\000\024\005\131\006\135\017" +
    "\141\030\137\065\130\066\140\067\136\070\133\103\150" +
    "\001\002\000\012\101\uff9e\103\uff9e\104\uff9e\124\uff9e\001" +
    "\002\000\004\057\171\001\002\000\050\004\042\011\035" +
    "\013\017\014\034\024\043\027\016\033\046\034\032\045" +
    "\021\046\015\047\027\050\041\052\030\054\052\061\053" +
    "\111\033\115\045\120\040\123\051\001\002\000\052\004" +
    "\042\011\035\013\017\014\034\024\043\027\016\033\046" +
    "\034\032\045\021\046\015\047\027\050\041\052\030\054" +
    "\052\060\200\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\054\004\uffee\007\uffee\011\uffee\013\uffee\014" +
    "\uffee\024\uffee\027\uffee\033\uffee\034\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\052\uffee\054\uffee\060\uffee\061\uffee\111" +
    "\uffee\115\uffee\120\uffee\123\uffee\001\002\000\054\004\uffe6" +
    "\007\uffe6\011\uffe6\013\uffe6\014\uffe6\024\uffe6\027\uffe6\033" +
    "\uffe6\034\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6" +
    "\054\uffe6\060\uffe6\061\uffe6\111\uffe6\115\uffe6\120\uffe6\123" +
    "\uffe6\001\002\000\054\004\ufff4\007\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\024\ufff4\027\ufff4\033\ufff4\034\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\052\ufff4\054\ufff4\060\ufff4\061\ufff4" +
    "\111\ufff4\115\ufff4\120\ufff4\123\ufff4\001\002\000\054\004" +
    "\uffe4\007\uffe4\011\uffe4\013\uffe4\014\uffe4\024\uffe4\027\uffe4" +
    "\033\uffe4\034\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052" +
    "\uffe4\054\uffe4\060\uffe4\061\uffe4\111\uffe4\115\uffe4\120\uffe4" +
    "\123\uffe4\001\002\000\054\004\ufff2\007\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\024\ufff2\027\ufff2\033\ufff2\034\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\052\ufff2\054\ufff2\060\ufff2\061" +
    "\ufff2\111\ufff2\115\ufff2\120\ufff2\123\ufff2\001\002\000\054" +
    "\004\uff78\007\uff78\011\uff78\013\uff78\014\uff78\024\uff78\027" +
    "\uff78\033\uff78\034\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\052\uff78\054\uff78\060\uff78\061\uff78\111\uff78\115\uff78\120" +
    "\uff78\123\uff78\001\002\000\054\004\uffec\007\uffec\011\uffec" +
    "\013\uffec\014\uffec\024\uffec\027\uffec\033\uffec\034\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\052\uffec\054\uffec\060\uffec" +
    "\061\uffec\111\uffec\115\uffec\120\uffec\123\uffec\001\002\000" +
    "\004\104\205\001\002\000\054\004\uffe8\007\uffe8\011\uffe8" +
    "\013\uffe8\014\uffe8\024\uffe8\027\uffe8\033\uffe8\034\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\054\uffe8\060\uffe8" +
    "\061\uffe8\111\uffe8\115\uffe8\120\uffe8\123\uffe8\001\002\000" +
    "\054\004\ufff0\007\ufff0\011\ufff0\013\ufff0\014\ufff0\024\ufff0" +
    "\027\ufff0\033\ufff0\034\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\052\ufff0\054\ufff0\060\ufff0\061\ufff0\111\ufff0\115\ufff0" +
    "\120\ufff0\123\ufff0\001\002\000\054\004\uffea\007\uffea\011" +
    "\uffea\013\uffea\014\uffea\024\uffea\027\uffea\033\uffea\034\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\054\uffea\060" +
    "\uffea\061\uffea\111\uffea\115\uffea\120\uffea\123\uffea\001\002" +
    "\000\020\016\123\044\116\047\027\076\113\077\121\102" +
    "\115\117\117\001\002\000\032\005\131\006\135\017\141" +
    "\030\137\065\130\066\140\067\136\070\133\101\uff9c\103" +
    "\uff9c\104\uff9c\124\uff9c\001\002\000\020\016\123\044\116" +
    "\047\027\076\211\077\121\102\145\117\117\001\002\000" +
    "\016\016\123\044\116\047\027\077\121\102\145\117\117" +
    "\001\002\000\012\101\uffa2\103\uffa2\104\uffa2\124\uffa2\001" +
    "\002\000\012\101\uff9f\103\uff9f\104\uff9f\124\uff9f\001\002" +
    "\000\004\103\215\001\002\000\012\101\uff9d\103\uff9d\104" +
    "\uff9d\124\uff9d\001\002\000\020\016\123\044\116\047\027" +
    "\076\113\077\121\102\115\117\117\001\002\000\020\016" +
    "\123\044\116\047\027\076\113\077\121\102\115\117\117" +
    "\001\002\000\006\103\uff99\104\uff99\001\002\000\006\103" +
    "\uff98\104\uff98\001\002\000\050\004\042\011\035\013\017" +
    "\014\034\024\043\027\016\033\046\034\032\045\021\046" +
    "\015\047\027\050\041\052\030\054\052\061\053\111\033" +
    "\115\045\120\040\123\051\001\002\000\052\004\042\011" +
    "\035\013\017\014\034\024\043\027\016\033\046\034\032" +
    "\045\021\046\015\047\027\050\041\052\030\054\052\060" +
    "\224\061\053\111\033\115\045\120\040\123\051\001\002" +
    "\000\004\123\225\001\002\000\004\102\226\001\002\000" +
    "\020\016\123\044\116\047\027\076\113\077\121\102\115" +
    "\117\117\001\002\000\004\103\230\001\002\000\004\104" +
    "\231\001\002\000\054\004\uff77\007\uff77\011\uff77\013\uff77" +
    "\014\uff77\024\uff77\027\uff77\033\uff77\034\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\052\uff77\054\uff77\060\uff77\061\uff77" +
    "\111\uff77\115\uff77\120\uff77\123\uff77\001\002\000\004\047" +
    "\027\001\002\000\004\103\234\001\002\000\004\057\235" +
    "\001\002\000\004\012\236\001\002\000\010\016\300\047" +
    "\027\077\277\001\002\000\010\012\242\025\241\060\240" +
    "\001\002\000\054\004\uff61\007\uff61\011\uff61\013\uff61\014" +
    "\uff61\024\uff61\027\uff61\033\uff61\034\uff61\045\uff61\046\uff61" +
    "\047\uff61\050\uff61\052\uff61\054\uff61\060\uff61\061\uff61\111" +
    "\uff61\115\uff61\120\uff61\123\uff61\001\002\000\004\037\271" +
    "\001\002\000\010\016\244\047\027\077\243\001\002\000" +
    "\004\037\265\001\002\000\006\016\252\047\253\001\002" +
    "\000\004\037\246\001\002\000\050\004\042\011\035\013" +
    "\017\014\034\024\043\027\016\033\046\034\032\045\021" +
    "\046\015\047\027\050\041\052\030\054\052\061\053\111" +
    "\033\115\045\120\040\123\051\001\002\000\052\004\042" +
    "\007\250\011\035\013\017\014\034\024\043\027\016\033" +
    "\046\034\032\045\021\046\015\047\027\050\041\052\030" +
    "\054\052\061\053\111\033\115\045\120\040\123\051\001" +
    "\002\000\004\104\251\001\002\000\010\012\uff65\025\uff65" +
    "\060\uff65\001\002\000\004\037\261\001\002\000\004\016" +
    "\254\001\002\000\004\037\255\001\002\000\050\004\042" +
    "\011\035\013\017\014\034\024\043\027\016\033\046\034" +
    "\032\045\021\046\015\047\027\050\041\052\030\054\052" +
    "\061\053\111\033\115\045\120\040\123\051\001\002\000" +
    "\052\004\042\007\257\011\035\013\017\014\034\024\043" +
    "\027\016\033\046\034\032\045\021\046\015\047\027\050" +
    "\041\052\030\054\052\061\053\111\033\115\045\120\040" +
    "\123\051\001\002\000\004\104\260\001\002\000\010\012" +
    "\uff66\025\uff66\060\uff66\001\002\000\050\004\042\011\035" +
    "\013\017\014\034\024\043\027\016\033\046\034\032\045" +
    "\021\046\015\047\027\050\041\052\030\054\052\061\053" +
    "\111\033\115\045\120\040\123\051\001\002\000\052\004" +
    "\042\007\263\011\035\013\017\014\034\024\043\027\016" +
    "\033\046\034\032\045\021\046\015\047\027\050\041\052" +
    "\030\054\052\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\004\104\264\001\002\000\010\012\uff64\025" +
    "\uff64\060\uff64\001\002\000\050\004\042\011\035\013\017" +
    "\014\034\024\043\027\016\033\046\034\032\045\021\046" +
    "\015\047\027\050\041\052\030\054\052\061\053\111\033" +
    "\115\045\120\040\123\051\001\002\000\052\004\042\007" +
    "\267\011\035\013\017\014\034\024\043\027\016\033\046" +
    "\034\032\045\021\046\015\047\027\050\041\052\030\054" +
    "\052\061\053\111\033\115\045\120\040\123\051\001\002" +
    "\000\004\104\270\001\002\000\010\012\uff67\025\uff67\060" +
    "\uff67\001\002\000\050\004\042\011\035\013\017\014\034" +
    "\024\043\027\016\033\046\034\032\045\021\046\015\047" +
    "\027\050\041\052\030\054\052\061\053\111\033\115\045" +
    "\120\040\123\051\001\002\000\054\004\042\007\273\011" +
    "\035\013\017\014\034\024\043\027\016\033\046\034\032" +
    "\045\021\046\015\047\027\050\041\052\030\054\052\060" +
    "\274\061\053\111\033\115\045\120\040\123\051\001\002" +
    "\000\004\104\275\001\002\000\054\004\uff62\007\uff62\011" +
    "\uff62\013\uff62\014\uff62\024\uff62\027\uff62\033\uff62\034\uff62" +
    "\045\uff62\046\uff62\047\uff62\050\uff62\052\uff62\054\uff62\060" +
    "\uff62\061\uff62\111\uff62\115\uff62\120\uff62\123\uff62\001\002" +
    "\000\004\060\276\001\002\000\054\004\uff63\007\uff63\011" +
    "\uff63\013\uff63\014\uff63\024\uff63\027\uff63\033\uff63\034\uff63" +
    "\045\uff63\046\uff63\047\uff63\050\uff63\052\uff63\054\uff63\060" +
    "\uff63\061\uff63\111\uff63\115\uff63\120\uff63\123\uff63\001\002" +
    "\000\004\037\321\001\002\000\006\016\306\047\307\001" +
    "\002\000\004\037\302\001\002\000\050\004\042\011\035" +
    "\013\017\014\034\024\043\027\016\033\046\034\032\045" +
    "\021\046\015\047\027\050\041\052\030\054\052\061\053" +
    "\111\033\115\045\120\040\123\051\001\002\000\052\004" +
    "\042\007\304\011\035\013\017\014\034\024\043\027\016" +
    "\033\046\034\032\045\021\046\015\047\027\050\041\052" +
    "\030\054\052\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\004\104\305\001\002\000\010\012\uff68\025" +
    "\uff68\060\uff68\001\002\000\004\037\315\001\002\000\004" +
    "\016\310\001\002\000\004\037\311\001\002\000\050\004" +
    "\042\011\035\013\017\014\034\024\043\027\016\033\046" +
    "\034\032\045\021\046\015\047\027\050\041\052\030\054" +
    "\052\061\053\111\033\115\045\120\040\123\051\001\002" +
    "\000\052\004\042\007\313\011\035\013\017\014\034\024" +
    "\043\027\016\033\046\034\032\045\021\046\015\047\027" +
    "\050\041\052\030\054\052\061\053\111\033\115\045\120" +
    "\040\123\051\001\002\000\004\104\314\001\002\000\010" +
    "\012\uff6a\025\uff6a\060\uff6a\001\002\000\050\004\042\011" +
    "\035\013\017\014\034\024\043\027\016\033\046\034\032" +
    "\045\021\046\015\047\027\050\041\052\030\054\052\061" +
    "\053\111\033\115\045\120\040\123\051\001\002\000\052" +
    "\004\042\007\317\011\035\013\017\014\034\024\043\027" +
    "\016\033\046\034\032\045\021\046\015\047\027\050\041" +
    "\052\030\054\052\061\053\111\033\115\045\120\040\123" +
    "\051\001\002\000\004\104\320\001\002\000\010\012\uff69" +
    "\025\uff69\060\uff69\001\002\000\050\004\042\011\035\013" +
    "\017\014\034\024\043\027\016\033\046\034\032\045\021" +
    "\046\015\047\027\050\041\052\030\054\052\061\053\111" +
    "\033\115\045\120\040\123\051\001\002\000\052\004\042" +
    "\007\323\011\035\013\017\014\034\024\043\027\016\033" +
    "\046\034\032\045\021\046\015\047\027\050\041\052\030" +
    "\054\052\061\053\111\033\115\045\120\040\123\051\001" +
    "\002\000\004\104\324\001\002\000\010\012\uff6b\025\uff6b" +
    "\060\uff6b\001\002\000\006\047\027\077\355\001\002\000" +
    "\006\047\027\077\353\001\002\000\006\103\uff8b\104\uff8b" +
    "\001\002\000\006\047\027\077\351\001\002\000\006\103" +
    "\uff8a\104\uff8a\001\002\000\006\047\027\077\347\001\002" +
    "\000\006\047\027\077\345\001\002\000\006\047\027\077" +
    "\335\001\002\000\020\031\152\071\153\073\157\103\uff7d" +
    "\104\uff7d\107\155\112\156\001\002\000\020\031\152\071" +
    "\153\073\157\103\uff84\104\uff84\107\155\112\156\001\002" +
    "\000\006\047\027\077\340\001\002\000\006\103\uff7b\104" +
    "\uff7b\001\002\000\006\103\uff83\104\uff83\001\002\000\006" +
    "\047\027\077\343\001\002\000\006\103\uff7a\104\uff7a\001" +
    "\002\000\006\103\uff7c\104\uff7c\001\002\000\006\103\uff81" +
    "\104\uff81\001\002\000\006\103\uff88\104\uff88\001\002\000" +
    "\006\103\uff80\104\uff80\001\002\000\006\103\uff87\104\uff87" +
    "\001\002\000\006\103\uff7f\104\uff7f\001\002\000\006\103" +
    "\uff86\104\uff86\001\002\000\006\103\uff7e\104\uff7e\001\002" +
    "\000\006\103\uff85\104\uff85\001\002\000\006\103\uff82\104" +
    "\uff82\001\002\000\006\103\uff89\104\uff89\001\002\000\010" +
    "\016\360\041\362\047\027\001\002\000\006\016\367\047" +
    "\370\001\002\000\004\104\366\001\002\000\004\104\uff6f" +
    "\001\002\000\006\036\364\104\uff75\001\002\000\010\016" +
    "\360\041\362\047\027\001\002\000\004\104\uff70\001\002" +
    "\000\054\004\uff76\007\uff76\011\uff76\013\uff76\014\uff76\024" +
    "\uff76\027\uff76\033\uff76\034\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\052\uff76\054\uff76\060\uff76\061\uff76\111\uff76\115" +
    "\uff76\120\uff76\123\uff76\001\002\000\006\036\374\104\uff73" +
    "\001\002\000\004\016\371\001\002\000\006\036\372\104" +
    "\uff74\001\002\000\010\016\360\041\362\047\027\001\002" +
    "\000\004\104\uff72\001\002\000\010\016\360\041\362\047" +
    "\027\001\002\000\004\104\uff71\001\002\000\004\104\377" +
    "\001\002\000\054\004\uffbc\007\uffbc\011\uffbc\013\uffbc\014" +
    "\uffbc\024\uffbc\027\uffbc\033\uffbc\034\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\052\uffbc\054\uffbc\060\uffbc\061\uffbc\111" +
    "\uffbc\115\uffbc\120\uffbc\123\uffbc\001\002\000\020\016\123" +
    "\044\116\047\027\076\113\077\121\102\115\117\117\001" +
    "\002\000\004\103\u0102\001\002\000\004\057\u0103\001\002" +
    "\000\050\004\042\011\035\013\017\014\034\024\043\027" +
    "\016\033\046\034\032\045\021\046\015\047\027\050\041" +
    "\052\030\054\052\061\053\111\033\115\045\120\040\123" +
    "\051\001\002\000\052\004\042\011\035\013\017\014\034" +
    "\024\043\027\016\033\046\034\032\045\021\046\015\047" +
    "\027\050\041\052\030\054\052\060\u0105\061\053\111\033" +
    "\115\045\120\040\123\051\001\002\000\056\004\uff95\007" +
    "\uff95\011\uff95\013\uff95\014\uff95\024\uff95\027\uff95\033\uff95" +
    "\034\uff95\040\u0106\045\uff95\046\uff95\047\uff95\050\uff95\052" +
    "\uff95\054\uff95\060\uff95\061\uff95\111\uff95\115\uff95\120\uff95" +
    "\123\uff95\001\002\000\006\050\041\057\u0107\001\002\000" +
    "\050\004\042\011\035\013\017\014\034\024\043\027\016" +
    "\033\046\034\032\045\021\046\015\047\027\050\041\052" +
    "\030\054\052\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\054\004\uff93\007\uff93\011\uff93\013\uff93\014" +
    "\uff93\024\uff93\027\uff93\033\uff93\034\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\052\uff93\054\uff93\060\uff93\061\uff93\111" +
    "\uff93\115\uff93\120\uff93\123\uff93\001\002\000\052\004\042" +
    "\011\035\013\017\014\034\024\043\027\016\033\046\034" +
    "\032\045\021\046\015\047\027\050\041\052\030\054\052" +
    "\060\u010a\061\053\111\033\115\045\120\040\123\051\001" +
    "\002\000\054\004\uff94\007\uff94\011\uff94\013\uff94\014\uff94" +
    "\024\uff94\027\uff94\033\uff94\034\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\052\uff94\054\uff94\060\uff94\061\uff94\111\uff94" +
    "\115\uff94\120\uff94\123\uff94\001\002\000\004\047\056\001" +
    "\002\000\004\052\u0114\001\002\000\004\052\u0111\001\002" +
    "\000\004\047\056\001\002\000\004\104\u0110\001\002\000" +
    "\054\004\uffc7\007\uffc7\011\uffc7\013\uffc7\014\uffc7\024\uffc7" +
    "\027\uffc7\033\uffc7\034\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\052\uffc7\054\uffc7\060\uffc7\061\uffc7\111\uffc7\115\uffc7" +
    "\120\uffc7\123\uffc7\001\002\000\004\047\056\001\002\000" +
    "\004\104\u0113\001\002\000\054\004\uffc5\007\uffc5\011\uffc5" +
    "\013\uffc5\014\uffc5\024\uffc5\027\uffc5\033\uffc5\034\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\052\uffc5\054\uffc5\060\uffc5" +
    "\061\uffc5\111\uffc5\115\uffc5\120\uffc5\123\uffc5\001\002\000" +
    "\004\047\056\001\002\000\004\104\u0116\001\002\000\054" +
    "\004\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\024\uffc3\027" +
    "\uffc3\033\uffc3\034\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\052\uffc3\054\uffc3\060\uffc3\061\uffc3\111\uffc3\115\uffc3\120" +
    "\uffc3\123\uffc3\001\002\000\004\104\u0118\001\002\000\054" +
    "\004\uffbe\007\uffbe\011\uffbe\013\uffbe\014\uffbe\024\uffbe\027" +
    "\uffbe\033\uffbe\034\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\052\uffbe\054\uffbe\060\uffbe\061\uffbe\111\uffbe\115\uffbe\120" +
    "\uffbe\123\uffbe\001\002\000\054\004\uffe9\007\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\024\uffe9\027\uffe9\033\uffe9\034\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\054\uffe9\060\uffe9" +
    "\061\uffe9\111\uffe9\115\uffe9\120\uffe9\123\uffe9\001\002\000" +
    "\004\104\u0139\001\002\000\012\015\061\022\u011e\051\062" +
    "\104\uffd6\001\002\000\004\104\u011d\001\002\000\054\004" +
    "\uffbd\007\uffbd\011\uffbd\013\uffbd\014\uffbd\024\uffbd\027\uffbd" +
    "\033\uffbd\034\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\052" +
    "\uffbd\054\uffbd\060\uffbd\061\uffbd\111\uffbd\115\uffbd\120\uffbd" +
    "\123\uffbd\001\002\000\006\023\u0120\077\u011f\001\002\000" +
    "\004\023\u0130\001\002\000\004\051\u0121\001\002\000\004" +
    "\057\u0122\001\002\000\006\016\u0124\077\u0123\001\002\000" +
    "\006\015\u012e\060\uffd4\001\002\000\004\047\u012a\001\002" +
    "\000\004\060\u0126\001\002\000\006\015\u0127\104\uffcd\001" +
    "\002\000\004\047\u0129\001\002\000\004\104\uffce\001\002" +
    "\000\004\022\u011e\001\002\000\004\016\u012b\001\002\000" +
    "\006\015\u012c\060\uffd2\001\002\000\006\016\u0124\077\u0123" +
    "\001\002\000\004\060\uffd3\001\002\000\006\016\u0124\077" +
    "\u0123\001\002\000\004\060\uffd5\001\002\000\010\015\u0131" +
    "\051\u0132\104\uffc9\001\002\000\004\047\u0129\001\002\000" +
    "\004\057\u0133\001\002\000\006\016\u0124\077\u0123\001\002" +
    "\000\004\060\u0135\001\002\000\006\015\u0136\104\uffcb\001" +
    "\002\000\004\047\u0129\001\002\000\004\104\uffcc\001\002" +
    "\000\004\104\uffca\001\002\000\054\004\uffd0\007\uffd0\011" +
    "\uffd0\013\uffd0\014\uffd0\024\uffd0\027\uffd0\033\uffd0\034\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\052\uffd0\054\uffd0\060" +
    "\uffd0\061\uffd0\111\uffd0\115\uffd0\120\uffd0\123\uffd0\001\002" +
    "\000\004\047\027\001\002\000\006\035\u013e\104\uff6e\001" +
    "\002\000\004\104\u013d\001\002\000\054\004\uff6c\007\uff6c" +
    "\011\uff6c\013\uff6c\014\uff6c\024\uff6c\027\uff6c\033\uff6c\034" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\052\uff6c\054\uff6c" +
    "\060\uff6c\061\uff6c\111\uff6c\115\uff6c\120\uff6c\123\uff6c\001" +
    "\002\000\004\047\027\001\002\000\004\104\uff6d\001\002" +
    "\000\004\047\056\001\002\000\004\104\u0142\001\002\000" +
    "\054\004\uffc6\007\uffc6\011\uffc6\013\uffc6\014\uffc6\024\uffc6" +
    "\027\uffc6\033\uffc6\034\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\052\uffc6\054\uffc6\060\uffc6\061\uffc6\111\uffc6\115\uffc6" +
    "\120\uffc6\123\uffc6\001\002\000\004\104\u0144\001\002\000" +
    "\054\004\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\024\uffc2" +
    "\027\uffc2\033\uffc2\034\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\052\uffc2\054\uffc2\060\uffc2\061\uffc2\111\uffc2\115\uffc2" +
    "\120\uffc2\123\uffc2\001\002\000\004\104\u0148\001\002\000" +
    "\004\104\u0147\001\002\000\054\004\uffc8\007\uffc8\011\uffc8" +
    "\013\uffc8\014\uffc8\024\uffc8\027\uffc8\033\uffc8\034\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8\054\uffc8\060\uffc8" +
    "\061\uffc8\111\uffc8\115\uffc8\120\uffc8\123\uffc8\001\002\000" +
    "\054\004\uffd1\007\uffd1\011\uffd1\013\uffd1\014\uffd1\024\uffd1" +
    "\027\uffd1\033\uffd1\034\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\052\uffd1\054\uffd1\060\uffd1\061\uffd1\111\uffd1\115\uffd1" +
    "\120\uffd1\123\uffd1\001\002\000\004\077\u014a\001\002\000" +
    "\004\023\u014b\001\002\000\004\047\u014c\001\002\000\004" +
    "\022\u014d\001\002\000\004\047\u014e\001\002\000\004\023" +
    "\u014f\001\002\000\072\005\uff8e\006\uff8e\017\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\035\uff8e\036\uff8e\037\uff8e\051" +
    "\uff8e\054\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\101\uff8e\103" +
    "\uff8e\104\uff8e\107\uff8e\112\uff8e\124\uff8e\001\002\000\004" +
    "\002\ufff6\001\002\000\004\104\u0152\001\002\000\054\004" +
    "\uffc0\007\uffc0\011\uffc0\013\uffc0\014\uffc0\024\uffc0\027\uffc0" +
    "\033\uffc0\034\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\052" +
    "\uffc0\054\uffc0\060\uffc0\061\uffc0\111\uffc0\115\uffc0\120\uffc0" +
    "\123\uffc0\001\002\000\004\104\u0156\001\002\000\004\104" +
    "\u0155\001\002\000\054\004\uffbf\007\uffbf\011\uffbf\013\uffbf" +
    "\014\uffbf\024\uffbf\027\uffbf\033\uffbf\034\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\052\uffbf\054\uffbf\060\uffbf\061\uffbf" +
    "\111\uffbf\115\uffbf\120\uffbf\123\uffbf\001\002\000\054\004" +
    "\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\024\uffcf\027\uffcf" +
    "\033\uffcf\034\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\052" +
    "\uffcf\054\uffcf\060\uffcf\061\uffcf\111\uffcf\115\uffcf\120\uffcf" +
    "\123\uffcf\001\002\000\006\103\uff8c\104\uff8c\001\002\000" +
    "\006\047\027\052\u015b\001\002\000\004\104\u0161\001\002" +
    "\000\006\051\u015f\104\uff91\001\002\000\004\047\u015c\001" +
    "\002\000\004\051\u015d\001\002\000\004\077\u015e\001\002" +
    "\000\004\104\uff92\001\002\000\004\077\u0160\001\002\000" +
    "\004\104\uff90\001\002\000\020\016\123\044\116\047\027" +
    "\076\113\077\121\102\115\117\117\001\002\000\004\104" +
    "\u0163\001\002\000\010\027\016\047\027\054\052\001\002" +
    "\000\004\103\u0165\001\002\000\004\057\u0166\001\002\000" +
    "\050\004\042\011\035\013\017\014\034\024\043\027\016" +
    "\033\046\034\032\045\021\046\015\047\027\050\041\052" +
    "\030\054\052\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\052\004\042\011\035\013\017\014\034\024" +
    "\043\027\016\033\046\034\032\045\021\046\015\047\027" +
    "\050\041\052\030\054\052\060\u0168\061\053\111\033\115" +
    "\045\120\040\123\051\001\002\000\054\004\uff79\007\uff79" +
    "\011\uff79\013\uff79\014\uff79\024\uff79\027\uff79\033\uff79\034" +
    "\uff79\045\uff79\046\uff79\047\uff79\050\uff79\052\uff79\054\uff79" +
    "\060\uff79\061\uff79\111\uff79\115\uff79\120\uff79\123\uff79\001" +
    "\002\000\004\002\001\001\002\000\006\016\u016b\066\u016c" +
    "\001\002\000\004\047\u0174\001\002\000\006\047\u016d\055" +
    "\u016e\001\002\000\006\065\u0170\105\u0171\001\002\000\004" +
    "\065\u016f\001\002\000\010\052\ufffd\100\ufffd\121\ufffd\001" +
    "\002\000\010\052\ufffe\100\ufffe\121\ufffe\001\002\000\004" +
    "\047\u0172\001\002\000\004\065\u0173\001\002\000\010\052" +
    "\000\100\000\121\000\001\002\000\004\105\u0175\001\002" +
    "\000\004\047\u0176\001\002\000\004\016\u0177\001\002\000" +
    "\010\052\uffff\100\uffff\121\uffff\001\002\000\004\103\u0179" +
    "\001\002\000\004\057\u017a\001\002\000\050\004\042\011" +
    "\035\013\017\014\034\024\043\027\016\033\046\034\032" +
    "\045\021\046\015\047\027\050\041\052\030\054\052\061" +
    "\053\111\033\115\045\120\040\123\051\001\002\000\052" +
    "\004\042\011\035\013\017\014\034\024\043\027\016\033" +
    "\046\034\032\045\021\046\015\047\027\050\041\052\030" +
    "\054\052\060\u017c\061\053\111\033\115\045\120\040\123" +
    "\051\001\002\000\004\002\ufff5\001\002\000\004\075\u0194" +
    "\001\002\000\004\053\u0186\001\002\000\004\062\u0180\001" +
    "\002\000\004\102\u0181\001\002\000\004\103\u0182\001\002" +
    "\000\004\057\u0183\001\002\000\050\004\042\011\035\013" +
    "\017\014\034\024\043\027\016\033\046\034\032\045\021" +
    "\046\015\047\027\050\041\052\030\054\052\061\053\111" +
    "\033\115\045\120\040\123\051\001\002\000\052\004\042" +
    "\011\035\013\017\014\034\024\043\027\016\033\046\034" +
    "\032\045\021\046\015\047\027\050\041\052\030\054\052" +
    "\060\u0185\061\053\111\033\115\045\120\040\123\051\001" +
    "\002\000\004\002\ufff7\001\002\000\006\016\u0187\066\u0188" +
    "\001\002\000\004\047\u0190\001\002\000\006\047\u0189\055" +
    "\u018a\001\002\000\006\065\u018c\105\u018d\001\002\000\004" +
    "\065\u018b\001\002\000\010\052\ufff9\100\ufff9\121\ufff9\001" +
    "\002\000\010\052\ufffa\100\ufffa\121\ufffa\001\002\000\004" +
    "\047\u018e\001\002\000\004\065\u018f\001\002\000\010\052" +
    "\ufffc\100\ufffc\121\ufffc\001\002\000\004\105\u0191\001\002" +
    "\000\004\047\u0192\001\002\000\004\016\u0193\001\002\000" +
    "\010\052\ufffb\100\ufffb\121\ufffb\001\002\000\004\113\u0195" +
    "\001\002\000\004\104\u0196\001\002\000\004\052\u0197\001" +
    "\002\000\004\062\u0198\001\002\000\004\102\u0199\001\002" +
    "\000\004\103\u019a\001\002\000\004\057\u019b\001\002\000" +
    "\050\004\042\011\035\013\017\014\034\024\043\027\016" +
    "\033\046\034\032\045\021\046\015\047\027\050\041\052" +
    "\030\054\052\061\053\111\033\115\045\120\040\123\051" +
    "\001\002\000\052\004\042\011\035\013\017\014\034\024" +
    "\043\027\016\033\046\034\032\045\021\046\015\047\027" +
    "\050\041\052\030\054\052\060\u019d\061\053\111\033\115" +
    "\045\120\040\123\051\001\002\000\004\002\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\006\002\006\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\022\004\023\005\030\006\047" +
    "\016\036\017\017\020\035\022\046\024\021\027\025\031" +
    "\024\033\043\001\001\000\002\001\001\000\004\033\u0156" +
    "\001\001\000\006\012\u0153\032\u0152\001\001\000\002\001" +
    "\001\000\004\012\u0150\001\001\000\002\001\001\000\030" +
    "\004\174\005\176\006\203\016\201\017\172\020\200\022" +
    "\202\024\173\027\175\031\024\033\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u0145\032\u0144\001\001\000\002\001\001" +
    "\000\004\012\u0142\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u011b\032\u0119\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\107\001\001" +
    "\000\002\001\001\000\004\012\105\001\001\000\004\012" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\075\001\001\000\002\001\001\000" +
    "\004\012\077\001\001\000\002\001\001\000\004\012\101" +
    "\001\001\000\002\001\001\000\004\012\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\111\010\121\014" +
    "\113\033\117\001\001\000\002\001\001\000\006\010\206" +
    "\033\117\001\001\000\002\001\001\000\010\007\164\010" +
    "\165\033\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\161\001\001\000\004\021\153\001\001\000" +
    "\004\011\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\145\033" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\111\010\121\014\142\033\117\001\001\000\002\001" +
    "\001\000\012\007\111\010\121\014\141\033\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\150\033\117\001\001\000\006\010" +
    "\146\033\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\171" +
    "\004\023\005\030\006\047\016\036\017\017\020\035\022" +
    "\046\024\021\027\025\031\024\033\043\001\001\000\030" +
    "\004\174\005\176\006\203\016\201\017\172\020\200\022" +
    "\202\024\173\027\175\031\024\033\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\213\010\165\033\117\001\001" +
    "\000\004\011\207\001\001\000\006\010\211\033\117\001" +
    "\001\000\006\010\212\033\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\111\010\121\014\220\033\117\001\001\000\012" +
    "\007\111\010\121\014\217\033\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\222\004\023\005\030" +
    "\006\047\016\036\017\017\020\035\022\046\024\021\027" +
    "\025\031\024\033\043\001\001\000\030\004\174\005\176" +
    "\006\203\016\201\017\172\020\200\022\202\024\173\027" +
    "\175\031\024\033\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\111\010\121\014\226\033\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\236\001\001\000\004\033\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\246\004\023\005\030\006" +
    "\047\016\036\017\017\020\035\022\046\024\021\027\025" +
    "\031\024\033\043\001\001\000\030\004\174\005\176\006" +
    "\203\016\201\017\172\020\200\022\202\024\173\027\175" +
    "\031\024\033\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\255\004\023\005\030\006\047\016\036\017" +
    "\017\020\035\022\046\024\021\027\025\031\024\033\043" +
    "\001\001\000\030\004\174\005\176\006\203\016\201\017" +
    "\172\020\200\022\202\024\173\027\175\031\024\033\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\261\004\023\005\030\006\047\016\036\017\017\020\035" +
    "\022\046\024\021\027\025\031\024\033\043\001\001\000" +
    "\030\004\174\005\176\006\203\016\201\017\172\020\200" +
    "\022\202\024\173\027\175\031\024\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\265\004\023" +
    "\005\030\006\047\016\036\017\017\020\035\022\046\024" +
    "\021\027\025\031\024\033\043\001\001\000\030\004\174" +
    "\005\176\006\203\016\201\017\172\020\200\022\202\024" +
    "\173\027\175\031\024\033\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\271\004\023\005\030\006" +
    "\047\016\036\017\017\020\035\022\046\024\021\027\025" +
    "\031\024\033\043\001\001\000\030\004\174\005\176\006" +
    "\203\016\201\017\172\020\200\022\202\024\173\027\175" +
    "\031\024\033\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\302\004" +
    "\023\005\030\006\047\016\036\017\017\020\035\022\046" +
    "\024\021\027\025\031\024\033\043\001\001\000\030\004" +
    "\174\005\176\006\203\016\201\017\172\020\200\022\202" +
    "\024\173\027\175\031\024\033\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\311\004\023\005\030\006" +
    "\047\016\036\017\017\020\035\022\046\024\021\027\025" +
    "\031\024\033\043\001\001\000\030\004\174\005\176\006" +
    "\203\016\201\017\172\020\200\022\202\024\173\027\175" +
    "\031\024\033\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\315\004\023\005\030\006\047\016\036" +
    "\017\017\020\035\022\046\024\021\027\025\031\024\033" +
    "\043\001\001\000\030\004\174\005\176\006\203\016\201" +
    "\017\172\020\200\022\202\024\173\027\175\031\024\033" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\321\004\023\005\030\006\047\016\036\017\017\020" +
    "\035\022\046\024\021\027\025\031\024\033\043\001\001" +
    "\000\030\004\174\005\176\006\203\016\201\017\172\020" +
    "\200\022\202\024\173\027\175\031\024\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\355\001" +
    "\001\000\004\033\353\001\001\000\002\001\001\000\004" +
    "\033\351\001\001\000\002\001\001\000\004\033\347\001" +
    "\001\000\004\033\345\001\001\000\004\033\335\001\001" +
    "\000\004\021\341\001\001\000\004\021\336\001\001\000" +
    "\004\033\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\360\033\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\364\033\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\372\033\362\001\001\000\002\001" +
    "\001\000\006\023\374\033\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\111\010" +
    "\121\014\u0100\033\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\u0103\004\023\005\030\006\047\016" +
    "\036\017\017\020\035\022\046\024\021\027\025\031\024" +
    "\033\043\001\001\000\030\004\174\005\176\006\203\016" +
    "\201\017\172\020\200\022\202\024\173\027\175\031\024" +
    "\033\043\001\001\000\002\001\001\000\004\005\u0107\001" +
    "\001\000\032\003\u0108\004\023\005\030\006\047\016\036" +
    "\017\017\020\035\022\046\024\021\027\025\031\024\033" +
    "\043\001\001\000\002\001\001\000\030\004\174\005\176" +
    "\006\203\016\201\017\172\020\200\022\202\024\173\027" +
    "\175\031\024\033\043\001\001\000\002\001\001\000\004" +
    "\012\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u012c\001\001\000\002\001\001\000\004\030\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0137\001\001\000\002\001\001\000\004\030\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\u013b\033\u013a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u013e\033\u013a" +
    "\001\001\000\002\001\001\000\004\012\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0158\033\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\111\010\121\014\u0161\033\117\001\001" +
    "\000\002\001\001\000\006\016\u0163\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u0166\004\023" +
    "\005\030\006\047\016\036\017\017\020\035\022\046\024" +
    "\021\027\025\031\024\033\043\001\001\000\030\004\174" +
    "\005\176\006\203\016\201\017\172\020\200\022\202\024" +
    "\173\027\175\031\024\033\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\u017a\004\023\005\030\006\047" +
    "\016\036\017\017\020\035\022\046\024\021\027\025\031" +
    "\024\033\043\001\001\000\030\004\174\005\176\006\203" +
    "\016\201\017\172\020\200\022\202\024\173\027\175\031" +
    "\024\033\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u0183\004\023" +
    "\005\030\006\047\016\036\017\017\020\035\022\046\024" +
    "\021\027\025\031\024\033\043\001\001\000\030\004\174" +
    "\005\176\006\203\016\201\017\172\020\200\022\202\024" +
    "\173\027\175\031\024\033\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\u019b\004\023\005" +
    "\030\006\047\016\036\017\017\020\035\022\046\024\021" +
    "\027\025\031\024\033\043\001\001\000\030\004\174\005" +
    "\176\006\203\016\201\017\172\020\200\022\202\024\173" +
    "\027\175\031\024\033\043\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASE ::= CASE Case Comillas Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASE ::= CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASE ::= CASE Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CASE ::= Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CASE ::= Case Comillas Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CIN ::= Cin DobleMayor ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ENTRADA ::= IDENTIFICADORES DobleMayor ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ENTRADA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SALIDA ::= IDENTIFICADORES DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SALIDA ::= Comillas Comillas DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SALIDA ::= Comillas Identificador Comillas DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SALIDA ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SALIDA ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SALIDA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COUT ::= Cout DobleMenor SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACIONES_COMPLEMENTARIAS ::= Decremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACIONES_COMPLEMENTARIAS ::= Incremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IDENTIFICADORES ::= Identificador Corchete_a Numero Corchete_c Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR_PARTE_UNO ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FOR_PARTE_UNO ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR_PARTE_UNO ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA_SIMPLE ::= Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= DECLARACION_ARREGLO_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Bool DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Cadena DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_ARREGLO_ANIDADA ::= Char DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ARREGLO_ANIDADA ::= Cadena DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ARREGLO_ANIDADA ::= Int DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CREACION_ARREGLO ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREACION_ARREGLO ::= Comillas Identificador Comillas Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CREACION_ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CREACION_ARREGLO ::= Numero Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_ANIDADA ::= Identificador Igual False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_ANIDADA ::= Identificador Igual True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_ANIDADA ::= Identificador Igual False Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_ANIDADA ::= Identificador Igual True Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

